//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PriemLib
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PriemEntities : DbContext
    {
        public PriemEntities()
            : base("name=PriemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AttMarks> AttMarks { get; set; }
        public virtual DbSet<AttSubject> AttSubject { get; set; }
        public virtual DbSet<CelCompetition> CelCompetition { get; set; }
        public virtual DbSet<ChangeType> ChangeType { get; set; }
        public virtual DbSet<Competition> Competition { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<DogovorType> DogovorType { get; set; }
        public virtual DbSet<EgeCertificate> EgeCertificate { get; set; }
        public virtual DbSet<EgeExamName> EgeExamName { get; set; }
        public virtual DbSet<EgeMark> EgeMark { get; set; }
        public virtual DbSet<FBSStatus> FBSStatus { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<PassportType> PassportType { get; set; }
        public virtual DbSet<PayPeriod> PayPeriod { get; set; }
        public virtual DbSet<Prorektor> Prorektor { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<SchoolType> SchoolType { get; set; }
        public virtual DbSet<SP_Faculty> SP_Faculty { get; set; }
        public virtual DbSet<StudyBasis> StudyBasis { get; set; }
        public virtual DbSet<StudyForm> StudyForm { get; set; }
        public virtual DbSet<qFaculty> qFaculty { get; set; }
        public virtual DbSet<qLicenseProgram> qLicenseProgram { get; set; }
        public virtual DbSet<qProfile> qProfile { get; set; }
        public virtual DbSet<OlympLevel> OlympLevel { get; set; }
        public virtual DbSet<OlympSubject> OlympSubject { get; set; }
        public virtual DbSet<OlympValue> OlympValue { get; set; }
        public virtual DbSet<PaidData> PaidData { get; set; }
        public virtual DbSet<PayDataEntry> PayDataEntry { get; set; }
        public virtual DbSet<Exam> Exam { get; set; }
        public virtual DbSet<qStudyLevel> qStudyLevel { get; set; }
        public virtual DbSet<ExamName> ExamName { get; set; }
        public virtual DbSet<StudyLevel> StudyLevel { get; set; }
        public virtual DbSet<ProtocolType> ProtocolType { get; set; }
        public virtual DbSet<extEgeMark> extEgeMark { get; set; }
        public virtual DbSet<EgeToExam> EgeToExam { get; set; }
        public virtual DbSet<OlympBook> OlympBook { get; set; }
        public virtual DbSet<Olympiads> Olympiads { get; set; }
        public virtual DbSet<OlympType> OlympType { get; set; }
        public virtual DbSet<extOlympBook> extOlympBook { get; set; }
        public virtual DbSet<extEgeMarkMax> extEgeMarkMax { get; set; }
        public virtual DbSet<extOlympiads> extOlympiads { get; set; }
        public virtual DbSet<ProtocolNumbers> ProtocolNumbers { get; set; }
        public virtual DbSet<PersonChanges> PersonChanges { get; set; }
        public virtual DbSet<OlympName> OlympName { get; set; }
        public virtual DbSet<ExamsVed> ExamsVed { get; set; }
        public virtual DbSet<ExamsVedHistory> ExamsVedHistory { get; set; }
        public virtual DbSet<ExamsVedRoom> ExamsVedRoom { get; set; }
        public virtual DbSet<ExamsVedRoomHistory> ExamsVedRoomHistory { get; set; }
        public virtual DbSet<Abiturient> Abiturient { get; set; }
        public virtual DbSet<Protocol> Protocol { get; set; }
        public virtual DbSet<qAbitAll> qAbitAll { get; set; }
        public virtual DbSet<qProtocol> qProtocol { get; set; }
        public virtual DbSet<qProtocolHistory> qProtocolHistory { get; set; }
        public virtual DbSet<extOlympiadsAll> extOlympiadsAll { get; set; }
        public virtual DbSet<AbitDoc> AbitDoc { get; set; }
        public virtual DbSet<DocInventory> DocInventory { get; set; }
        public virtual DbSet<extFBSStatus> extFBSStatus { get; set; }
        public virtual DbSet<extExamsVed> extExamsVed { get; set; }
        public virtual DbSet<extEgeMarkMaxAbit> extEgeMarkMaxAbit { get; set; }
        public virtual DbSet<EgeToLanguage> EgeToLanguage { get; set; }
        public virtual DbSet<Fixieren> Fixieren { get; set; }
        public virtual DbSet<FixierenView> FixierenView { get; set; }
        public virtual DbSet<extAbitMarksSum> extAbitMarksSum { get; set; }
        public virtual DbSet<extEntryView> extEntryView { get; set; }
        public virtual DbSet<extProtocol> extProtocol { get; set; }
        public virtual DbSet<extEnableProtocol> extEnableProtocol { get; set; }
        public virtual DbSet<extDisEntryView> extDisEntryView { get; set; }
        public virtual DbSet<qEntry> qEntry { get; set; }
        public virtual DbSet<C_FirstWaveGreen> C_FirstWaveGreen { get; set; }
        public virtual DbSet<extEntryProtocols> extEntryProtocols { get; set; }
        public virtual DbSet<CompetitiveGroup> CompetitiveGroup { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<Person_AdditionalInfo> Person_AdditionalInfo { get; set; }
        public virtual DbSet<Person_Contacts> Person_Contacts { get; set; }
        public virtual DbSet<Person_EducationInfo> Person_EducationInfo { get; set; }
        public virtual DbSet<BenefitDocumentType> BenefitDocumentType { get; set; }
        public virtual DbSet<PersonBenefitDocument> PersonBenefitDocument { get; set; }
        public virtual DbSet<extPersonAll> extPersonAll { get; set; }
        public virtual DbSet<StudyLevelGroup> StudyLevelGroup { get; set; }
        public virtual DbSet<OlympiadCheckedByRectorat> OlympiadCheckedByRectorat { get; set; }
        public virtual DbSet<hlpAbiturientProf> hlpAbiturientProf { get; set; }
        public virtual DbSet<hlpAbiturientProfAdd> hlpAbiturientProfAdd { get; set; }
        public virtual DbSet<OrderNumbers> OrderNumbers { get; set; }
        public virtual DbSet<extEntryView_ForDisEntered> extEntryView_ForDisEntered { get; set; }
        public virtual DbSet<C_FirstWave> C_FirstWave { get; set; }
        public virtual DbSet<SchoolNames> SchoolNames { get; set; }
        public virtual DbSet<C_AppSettings> C_AppSettings { get; set; }
        public virtual DbSet<SP_LicenseProgram> SP_LicenseProgram { get; set; }
        public virtual DbSet<SP_ObrazProgram> SP_ObrazProgram { get; set; }
        public virtual DbSet<SP_Profile> SP_Profile { get; set; }
        public virtual DbSet<qObrazProgram> qObrazProgram { get; set; }
        public virtual DbSet<ApplicationDetails> ApplicationDetails { get; set; }
        public virtual DbSet<ApplicationVersion> ApplicationVersion { get; set; }
        public virtual DbSet<ApplicationVersionDetails> ApplicationVersionDetails { get; set; }
        public virtual DbSet<Comission> Comission { get; set; }
        public virtual DbSet<Entry> Entry { get; set; }
        public virtual DbSet<qAbiturient> qAbiturient { get; set; }
        public virtual DbSet<qAbiturient_WhoSetHasOriginals> qAbiturient_WhoSetHasOriginals { get; set; }
        public virtual DbSet<qAbiturient_WhoSetBackDoc> qAbiturient_WhoSetBackDoc { get; set; }
        public virtual DbSet<hlpAbiturientActionLog> hlpAbiturientActionLog { get; set; }
        public virtual DbSet<qAbiturientForeignApplicationsOnly> qAbiturientForeignApplicationsOnly { get; set; }
        public virtual DbSet<ExaminerAccount> ExaminerAccount { get; set; }
        public virtual DbSet<ExaminerInExamsVed> ExaminerInExamsVed { get; set; }
        public virtual DbSet<EntryHeader> EntryHeader { get; set; }
        public virtual DbSet<hlpStatistics> hlpStatistics { get; set; }
        public virtual DbSet<qEntryToCompetitiveGroup> qEntryToCompetitiveGroup { get; set; }
        public virtual DbSet<OlympSubjectToExam> OlympSubjectToExam { get; set; }
        public virtual DbSet<qAbiturient_WhoSetIsPaid> qAbiturient_WhoSetIsPaid { get; set; }
        public virtual DbSet<Signer> Signer { get; set; }
        public virtual DbSet<extEntry> extEntry { get; set; }
        public virtual DbSet<ForeignCountry> ForeignCountry { get; set; }
        public virtual DbSet<SP_AggregateGroup> SP_AggregateGroup { get; set; }
        public virtual DbSet<InnerEntryInEntry> InnerEntryInEntry { get; set; }
        public virtual DbSet<extAbit> extAbit { get; set; }
        public virtual DbSet<extPerson> extPerson { get; set; }
        public virtual DbSet<extPerson_EducationInfo> extPerson_EducationInfo { get; set; }
        public virtual DbSet<extPerson_EducationInfo_Current> extPerson_EducationInfo_Current { get; set; }
        public virtual DbSet<extApplicationDetails> extApplicationDetails { get; set; }
        public virtual DbSet<hlpPersonMaxEducationInfoId> hlpPersonMaxEducationInfoId { get; set; }
        public virtual DbSet<PersonSportQualification> PersonSportQualification { get; set; }
        public virtual DbSet<SportQualification> SportQualification { get; set; }
        public virtual DbSet<extForeignPerson> extForeignPerson { get; set; }
        public virtual DbSet<PersonEgeRequest> PersonEgeRequest { get; set; }
        public virtual DbSet<AchievementType> AchievementType { get; set; }
        public virtual DbSet<PersonAchievement> PersonAchievement { get; set; }
        public virtual DbSet<EntryToCompetitiveGroup> EntryToCompetitiveGroup { get; set; }
        public virtual DbSet<PersonOtherPassport> PersonOtherPassport { get; set; }
        public virtual DbSet<OlympResultToCommonBenefit> OlympResultToCommonBenefit { get; set; }
        public virtual DbSet<extEgeMarkMaxAbitApproved> extEgeMarkMaxAbitApproved { get; set; }
        public virtual DbSet<PersonNoticies> PersonNoticies { get; set; }
        public virtual DbSet<extEgeMarkMaxApproved> extEgeMarkMaxApproved { get; set; }
        public virtual DbSet<hlpEgeMarkMaxApproved> hlpEgeMarkMaxApproved { get; set; }
        public virtual DbSet<extAbitAdditionalMarksSum> extAbitAdditionalMarksSum { get; set; }
        public virtual DbSet<OlympResultToAdditionalMark> OlympResultToAdditionalMark { get; set; }
        public virtual DbSet<extDisEntryFromReEnterView> extDisEntryFromReEnterView { get; set; }
        public virtual DbSet<ProtocolHistory> ProtocolHistory { get; set; }
        public virtual DbSet<extAbitAllAdditionalAchievements> extAbitAllAdditionalAchievements { get; set; }
        public virtual DbSet<AdmissionProtocol> AdmissionProtocol { get; set; }
        public virtual DbSet<Privilege> Privilege { get; set; }
        public virtual DbSet<AbiturientSelectedExam> AbiturientSelectedExam { get; set; }
        public virtual DbSet<ExamInEntryBlock> ExamInEntryBlock { get; set; }
        public virtual DbSet<ExamInEntryBlockUnit> ExamInEntryBlockUnit { get; set; }
        public virtual DbSet<Mark> Mark { get; set; }
        public virtual DbSet<qMark> qMark { get; set; }
        public virtual DbSet<extExamInEntry> extExamInEntry { get; set; }
        public virtual DbSet<SchoolExitClass> SchoolExitClass { get; set; }
        public virtual DbSet<LanguageCertificatesType> LanguageCertificatesType { get; set; }
        public virtual DbSet<PersonLanguageCertificates> PersonLanguageCertificates { get; set; }
    
        public virtual int RoleMember(string roleName, ObjectParameter result)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RoleMember", roleNameParameter, result);
        }
    
        public virtual int CheckPersonIdent(string surname, string name, string secondName, Nullable<System.DateTime> birth, string passSeries, string passNum, string attSeries, string attNum, ObjectParameter result)
        {
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var secondNameParameter = secondName != null ?
                new ObjectParameter("SecondName", secondName) :
                new ObjectParameter("SecondName", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            var passSeriesParameter = passSeries != null ?
                new ObjectParameter("PassSeries", passSeries) :
                new ObjectParameter("PassSeries", typeof(string));
    
            var passNumParameter = passNum != null ?
                new ObjectParameter("PassNum", passNum) :
                new ObjectParameter("PassNum", typeof(string));
    
            var attSeriesParameter = attSeries != null ?
                new ObjectParameter("AttSeries", attSeries) :
                new ObjectParameter("AttSeries", typeof(string));
    
            var attNumParameter = attNum != null ?
                new ObjectParameter("AttNum", attNum) :
                new ObjectParameter("AttNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckPersonIdent", surnameParameter, nameParameter, secondNameParameter, birthParameter, passSeriesParameter, passNumParameter, attSeriesParameter, attNumParameter, result);
        }
    
        public virtual int CheckPersonIdentWithId(string surname, string name, string secondName, Nullable<System.DateTime> birth, string passSeries, string passNum, string attSeries, string attNum, Nullable<System.Guid> personId, ObjectParameter result)
        {
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var secondNameParameter = secondName != null ?
                new ObjectParameter("SecondName", secondName) :
                new ObjectParameter("SecondName", typeof(string));
    
            var birthParameter = birth.HasValue ?
                new ObjectParameter("Birth", birth) :
                new ObjectParameter("Birth", typeof(System.DateTime));
    
            var passSeriesParameter = passSeries != null ?
                new ObjectParameter("PassSeries", passSeries) :
                new ObjectParameter("PassSeries", typeof(string));
    
            var passNumParameter = passNum != null ?
                new ObjectParameter("PassNum", passNum) :
                new ObjectParameter("PassNum", typeof(string));
    
            var attSeriesParameter = attSeries != null ?
                new ObjectParameter("AttSeries", attSeries) :
                new ObjectParameter("AttSeries", typeof(string));
    
            var attNumParameter = attNum != null ?
                new ObjectParameter("AttNum", attNum) :
                new ObjectParameter("AttNum", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckPersonIdentWithId", surnameParameter, nameParameter, secondNameParameter, birthParameter, passSeriesParameter, passNumParameter, attSeriesParameter, attNumParameter, personIdParameter, result);
        }
    
        public virtual int Person_insert(Nullable<int> barcode, string name, string secondName, string surname, Nullable<System.DateTime> birthDate, string birthPlace, Nullable<int> passportTypeId, string passportSeries, string passportNumber, string passportAuthor, Nullable<System.DateTime> passportDate, Nullable<bool> sex, Nullable<int> countryId, Nullable<int> nationalityId, Nullable<int> regionId, string phone, string mobiles, string email, string code, string city, string street, string house, string korpus, string flat, string codeReal, string cityReal, string streetReal, string houseReal, string korpusReal, string flatReal, string kladrCode, Nullable<bool> hostelAbit, Nullable<bool> hostelEduc, Nullable<bool> hasAssignToHostel, Nullable<int> hostelFacultyId, Nullable<bool> hasExamPass, Nullable<int> examPassFacultyId, Nullable<int> languageId, string stag, string workPlace, string mSVuz, string mSCourse, Nullable<int> mSStudyFormId, Nullable<int> privileges, string passportCode, string personalCode, string personInfo, string extraInfo, string scienceWork, Nullable<bool> startEnglish, Nullable<double> englishMark, Nullable<bool> egeInSpbgu, string sNILS, Nullable<bool> hasTRKI, string tRKICertificateNumber, ObjectParameter id)
        {
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var secondNameParameter = secondName != null ?
                new ObjectParameter("SecondName", secondName) :
                new ObjectParameter("SecondName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var passportTypeIdParameter = passportTypeId.HasValue ?
                new ObjectParameter("PassportTypeId", passportTypeId) :
                new ObjectParameter("PassportTypeId", typeof(int));
    
            var passportSeriesParameter = passportSeries != null ?
                new ObjectParameter("PassportSeries", passportSeries) :
                new ObjectParameter("PassportSeries", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportAuthorParameter = passportAuthor != null ?
                new ObjectParameter("PassportAuthor", passportAuthor) :
                new ObjectParameter("PassportAuthor", typeof(string));
    
            var passportDateParameter = passportDate.HasValue ?
                new ObjectParameter("PassportDate", passportDate) :
                new ObjectParameter("PassportDate", typeof(System.DateTime));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(bool));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobilesParameter = mobiles != null ?
                new ObjectParameter("Mobiles", mobiles) :
                new ObjectParameter("Mobiles", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var houseParameter = house != null ?
                new ObjectParameter("House", house) :
                new ObjectParameter("House", typeof(string));
    
            var korpusParameter = korpus != null ?
                new ObjectParameter("Korpus", korpus) :
                new ObjectParameter("Korpus", typeof(string));
    
            var flatParameter = flat != null ?
                new ObjectParameter("Flat", flat) :
                new ObjectParameter("Flat", typeof(string));
    
            var codeRealParameter = codeReal != null ?
                new ObjectParameter("CodeReal", codeReal) :
                new ObjectParameter("CodeReal", typeof(string));
    
            var cityRealParameter = cityReal != null ?
                new ObjectParameter("CityReal", cityReal) :
                new ObjectParameter("CityReal", typeof(string));
    
            var streetRealParameter = streetReal != null ?
                new ObjectParameter("StreetReal", streetReal) :
                new ObjectParameter("StreetReal", typeof(string));
    
            var houseRealParameter = houseReal != null ?
                new ObjectParameter("HouseReal", houseReal) :
                new ObjectParameter("HouseReal", typeof(string));
    
            var korpusRealParameter = korpusReal != null ?
                new ObjectParameter("KorpusReal", korpusReal) :
                new ObjectParameter("KorpusReal", typeof(string));
    
            var flatRealParameter = flatReal != null ?
                new ObjectParameter("FlatReal", flatReal) :
                new ObjectParameter("FlatReal", typeof(string));
    
            var kladrCodeParameter = kladrCode != null ?
                new ObjectParameter("KladrCode", kladrCode) :
                new ObjectParameter("KladrCode", typeof(string));
    
            var hostelAbitParameter = hostelAbit.HasValue ?
                new ObjectParameter("HostelAbit", hostelAbit) :
                new ObjectParameter("HostelAbit", typeof(bool));
    
            var hostelEducParameter = hostelEduc.HasValue ?
                new ObjectParameter("HostelEduc", hostelEduc) :
                new ObjectParameter("HostelEduc", typeof(bool));
    
            var hasAssignToHostelParameter = hasAssignToHostel.HasValue ?
                new ObjectParameter("HasAssignToHostel", hasAssignToHostel) :
                new ObjectParameter("HasAssignToHostel", typeof(bool));
    
            var hostelFacultyIdParameter = hostelFacultyId.HasValue ?
                new ObjectParameter("HostelFacultyId", hostelFacultyId) :
                new ObjectParameter("HostelFacultyId", typeof(int));
    
            var hasExamPassParameter = hasExamPass.HasValue ?
                new ObjectParameter("HasExamPass", hasExamPass) :
                new ObjectParameter("HasExamPass", typeof(bool));
    
            var examPassFacultyIdParameter = examPassFacultyId.HasValue ?
                new ObjectParameter("ExamPassFacultyId", examPassFacultyId) :
                new ObjectParameter("ExamPassFacultyId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var stagParameter = stag != null ?
                new ObjectParameter("Stag", stag) :
                new ObjectParameter("Stag", typeof(string));
    
            var workPlaceParameter = workPlace != null ?
                new ObjectParameter("WorkPlace", workPlace) :
                new ObjectParameter("WorkPlace", typeof(string));
    
            var mSVuzParameter = mSVuz != null ?
                new ObjectParameter("MSVuz", mSVuz) :
                new ObjectParameter("MSVuz", typeof(string));
    
            var mSCourseParameter = mSCourse != null ?
                new ObjectParameter("MSCourse", mSCourse) :
                new ObjectParameter("MSCourse", typeof(string));
    
            var mSStudyFormIdParameter = mSStudyFormId.HasValue ?
                new ObjectParameter("MSStudyFormId", mSStudyFormId) :
                new ObjectParameter("MSStudyFormId", typeof(int));
    
            var privilegesParameter = privileges.HasValue ?
                new ObjectParameter("Privileges", privileges) :
                new ObjectParameter("Privileges", typeof(int));
    
            var passportCodeParameter = passportCode != null ?
                new ObjectParameter("PassportCode", passportCode) :
                new ObjectParameter("PassportCode", typeof(string));
    
            var personalCodeParameter = personalCode != null ?
                new ObjectParameter("PersonalCode", personalCode) :
                new ObjectParameter("PersonalCode", typeof(string));
    
            var personInfoParameter = personInfo != null ?
                new ObjectParameter("PersonInfo", personInfo) :
                new ObjectParameter("PersonInfo", typeof(string));
    
            var extraInfoParameter = extraInfo != null ?
                new ObjectParameter("ExtraInfo", extraInfo) :
                new ObjectParameter("ExtraInfo", typeof(string));
    
            var scienceWorkParameter = scienceWork != null ?
                new ObjectParameter("ScienceWork", scienceWork) :
                new ObjectParameter("ScienceWork", typeof(string));
    
            var startEnglishParameter = startEnglish.HasValue ?
                new ObjectParameter("StartEnglish", startEnglish) :
                new ObjectParameter("StartEnglish", typeof(bool));
    
            var englishMarkParameter = englishMark.HasValue ?
                new ObjectParameter("EnglishMark", englishMark) :
                new ObjectParameter("EnglishMark", typeof(double));
    
            var egeInSpbguParameter = egeInSpbgu.HasValue ?
                new ObjectParameter("EgeInSpbgu", egeInSpbgu) :
                new ObjectParameter("EgeInSpbgu", typeof(bool));
    
            var sNILSParameter = sNILS != null ?
                new ObjectParameter("SNILS", sNILS) :
                new ObjectParameter("SNILS", typeof(string));
    
            var hasTRKIParameter = hasTRKI.HasValue ?
                new ObjectParameter("HasTRKI", hasTRKI) :
                new ObjectParameter("HasTRKI", typeof(bool));
    
            var tRKICertificateNumberParameter = tRKICertificateNumber != null ?
                new ObjectParameter("TRKICertificateNumber", tRKICertificateNumber) :
                new ObjectParameter("TRKICertificateNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_insert", barcodeParameter, nameParameter, secondNameParameter, surnameParameter, birthDateParameter, birthPlaceParameter, passportTypeIdParameter, passportSeriesParameter, passportNumberParameter, passportAuthorParameter, passportDateParameter, sexParameter, countryIdParameter, nationalityIdParameter, regionIdParameter, phoneParameter, mobilesParameter, emailParameter, codeParameter, cityParameter, streetParameter, houseParameter, korpusParameter, flatParameter, codeRealParameter, cityRealParameter, streetRealParameter, houseRealParameter, korpusRealParameter, flatRealParameter, kladrCodeParameter, hostelAbitParameter, hostelEducParameter, hasAssignToHostelParameter, hostelFacultyIdParameter, hasExamPassParameter, examPassFacultyIdParameter, languageIdParameter, stagParameter, workPlaceParameter, mSVuzParameter, mSCourseParameter, mSStudyFormIdParameter, privilegesParameter, passportCodeParameter, personalCodeParameter, personInfoParameter, extraInfoParameter, scienceWorkParameter, startEnglishParameter, englishMarkParameter, egeInSpbguParameter, sNILSParameter, hasTRKIParameter, tRKICertificateNumberParameter, id);
        }
    
        public virtual int Person_UpdateMain(string name, string secondName, string surname, Nullable<System.DateTime> birthDate, Nullable<int> passportTypeId, string passportSeries, string passportNumber, string passportAuthor, Nullable<System.DateTime> passportDate, Nullable<int> privileges, string sNILS, Nullable<System.Guid> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var secondNameParameter = secondName != null ?
                new ObjectParameter("SecondName", secondName) :
                new ObjectParameter("SecondName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var passportTypeIdParameter = passportTypeId.HasValue ?
                new ObjectParameter("PassportTypeId", passportTypeId) :
                new ObjectParameter("PassportTypeId", typeof(int));
    
            var passportSeriesParameter = passportSeries != null ?
                new ObjectParameter("PassportSeries", passportSeries) :
                new ObjectParameter("PassportSeries", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var passportAuthorParameter = passportAuthor != null ?
                new ObjectParameter("PassportAuthor", passportAuthor) :
                new ObjectParameter("PassportAuthor", typeof(string));
    
            var passportDateParameter = passportDate.HasValue ?
                new ObjectParameter("PassportDate", passportDate) :
                new ObjectParameter("PassportDate", typeof(System.DateTime));
    
            var privilegesParameter = privileges.HasValue ?
                new ObjectParameter("Privileges", privileges) :
                new ObjectParameter("Privileges", typeof(int));
    
            var sNILSParameter = sNILS != null ?
                new ObjectParameter("SNILS", sNILS) :
                new ObjectParameter("SNILS", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_UpdateMain", nameParameter, secondNameParameter, surnameParameter, birthDateParameter, passportTypeIdParameter, passportSeriesParameter, passportNumberParameter, passportAuthorParameter, passportDateParameter, privilegesParameter, sNILSParameter, idParameter);
        }
    
        public virtual int Person_UpdateWithoutMain(string birthPlace, Nullable<bool> sex, Nullable<int> countryId, Nullable<int> foreignCountryId, Nullable<int> nationalityId, Nullable<int> foreignNationalityId, Nullable<int> regionId, string phone, string mobiles, string email, string code, string city, string street, string house, string korpus, string flat, string codeReal, string cityReal, string streetReal, string houseReal, string korpusReal, string flatReal, string kladrCode, Nullable<bool> hostelAbit, Nullable<bool> hostelEduc, Nullable<bool> hasAssignToHostel, Nullable<int> hostelFacultyId, Nullable<bool> hasExamPass, Nullable<int> examPassFacultyId, Nullable<int> languageId, string stag, string workPlace, string mSVuz, string mSCourse, Nullable<int> mSStudyFormId, string passportCode, string personalCode, string personInfo, string extraInfo, string scienceWork, Nullable<bool> startEnglish, Nullable<double> englishMark, Nullable<bool> egeInSpbgu, Nullable<System.Guid> id)
        {
            var birthPlaceParameter = birthPlace != null ?
                new ObjectParameter("BirthPlace", birthPlace) :
                new ObjectParameter("BirthPlace", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(bool));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var foreignCountryIdParameter = foreignCountryId.HasValue ?
                new ObjectParameter("ForeignCountryId", foreignCountryId) :
                new ObjectParameter("ForeignCountryId", typeof(int));
    
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            var foreignNationalityIdParameter = foreignNationalityId.HasValue ?
                new ObjectParameter("ForeignNationalityId", foreignNationalityId) :
                new ObjectParameter("ForeignNationalityId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobilesParameter = mobiles != null ?
                new ObjectParameter("Mobiles", mobiles) :
                new ObjectParameter("Mobiles", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var houseParameter = house != null ?
                new ObjectParameter("House", house) :
                new ObjectParameter("House", typeof(string));
    
            var korpusParameter = korpus != null ?
                new ObjectParameter("Korpus", korpus) :
                new ObjectParameter("Korpus", typeof(string));
    
            var flatParameter = flat != null ?
                new ObjectParameter("Flat", flat) :
                new ObjectParameter("Flat", typeof(string));
    
            var codeRealParameter = codeReal != null ?
                new ObjectParameter("CodeReal", codeReal) :
                new ObjectParameter("CodeReal", typeof(string));
    
            var cityRealParameter = cityReal != null ?
                new ObjectParameter("CityReal", cityReal) :
                new ObjectParameter("CityReal", typeof(string));
    
            var streetRealParameter = streetReal != null ?
                new ObjectParameter("StreetReal", streetReal) :
                new ObjectParameter("StreetReal", typeof(string));
    
            var houseRealParameter = houseReal != null ?
                new ObjectParameter("HouseReal", houseReal) :
                new ObjectParameter("HouseReal", typeof(string));
    
            var korpusRealParameter = korpusReal != null ?
                new ObjectParameter("KorpusReal", korpusReal) :
                new ObjectParameter("KorpusReal", typeof(string));
    
            var flatRealParameter = flatReal != null ?
                new ObjectParameter("FlatReal", flatReal) :
                new ObjectParameter("FlatReal", typeof(string));
    
            var kladrCodeParameter = kladrCode != null ?
                new ObjectParameter("KladrCode", kladrCode) :
                new ObjectParameter("KladrCode", typeof(string));
    
            var hostelAbitParameter = hostelAbit.HasValue ?
                new ObjectParameter("HostelAbit", hostelAbit) :
                new ObjectParameter("HostelAbit", typeof(bool));
    
            var hostelEducParameter = hostelEduc.HasValue ?
                new ObjectParameter("HostelEduc", hostelEduc) :
                new ObjectParameter("HostelEduc", typeof(bool));
    
            var hasAssignToHostelParameter = hasAssignToHostel.HasValue ?
                new ObjectParameter("HasAssignToHostel", hasAssignToHostel) :
                new ObjectParameter("HasAssignToHostel", typeof(bool));
    
            var hostelFacultyIdParameter = hostelFacultyId.HasValue ?
                new ObjectParameter("HostelFacultyId", hostelFacultyId) :
                new ObjectParameter("HostelFacultyId", typeof(int));
    
            var hasExamPassParameter = hasExamPass.HasValue ?
                new ObjectParameter("HasExamPass", hasExamPass) :
                new ObjectParameter("HasExamPass", typeof(bool));
    
            var examPassFacultyIdParameter = examPassFacultyId.HasValue ?
                new ObjectParameter("ExamPassFacultyId", examPassFacultyId) :
                new ObjectParameter("ExamPassFacultyId", typeof(int));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var stagParameter = stag != null ?
                new ObjectParameter("Stag", stag) :
                new ObjectParameter("Stag", typeof(string));
    
            var workPlaceParameter = workPlace != null ?
                new ObjectParameter("WorkPlace", workPlace) :
                new ObjectParameter("WorkPlace", typeof(string));
    
            var mSVuzParameter = mSVuz != null ?
                new ObjectParameter("MSVuz", mSVuz) :
                new ObjectParameter("MSVuz", typeof(string));
    
            var mSCourseParameter = mSCourse != null ?
                new ObjectParameter("MSCourse", mSCourse) :
                new ObjectParameter("MSCourse", typeof(string));
    
            var mSStudyFormIdParameter = mSStudyFormId.HasValue ?
                new ObjectParameter("MSStudyFormId", mSStudyFormId) :
                new ObjectParameter("MSStudyFormId", typeof(int));
    
            var passportCodeParameter = passportCode != null ?
                new ObjectParameter("PassportCode", passportCode) :
                new ObjectParameter("PassportCode", typeof(string));
    
            var personalCodeParameter = personalCode != null ?
                new ObjectParameter("PersonalCode", personalCode) :
                new ObjectParameter("PersonalCode", typeof(string));
    
            var personInfoParameter = personInfo != null ?
                new ObjectParameter("PersonInfo", personInfo) :
                new ObjectParameter("PersonInfo", typeof(string));
    
            var extraInfoParameter = extraInfo != null ?
                new ObjectParameter("ExtraInfo", extraInfo) :
                new ObjectParameter("ExtraInfo", typeof(string));
    
            var scienceWorkParameter = scienceWork != null ?
                new ObjectParameter("ScienceWork", scienceWork) :
                new ObjectParameter("ScienceWork", typeof(string));
    
            var startEnglishParameter = startEnglish.HasValue ?
                new ObjectParameter("StartEnglish", startEnglish) :
                new ObjectParameter("StartEnglish", typeof(bool));
    
            var englishMarkParameter = englishMark.HasValue ?
                new ObjectParameter("EnglishMark", englishMark) :
                new ObjectParameter("EnglishMark", typeof(double));
    
            var egeInSpbguParameter = egeInSpbgu.HasValue ?
                new ObjectParameter("EgeInSpbgu", egeInSpbgu) :
                new ObjectParameter("EgeInSpbgu", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_UpdateWithoutMain", birthPlaceParameter, sexParameter, countryIdParameter, foreignCountryIdParameter, nationalityIdParameter, foreignNationalityIdParameter, regionIdParameter, phoneParameter, mobilesParameter, emailParameter, codeParameter, cityParameter, streetParameter, houseParameter, korpusParameter, flatParameter, codeRealParameter, cityRealParameter, streetRealParameter, houseRealParameter, korpusRealParameter, flatRealParameter, kladrCodeParameter, hostelAbitParameter, hostelEducParameter, hasAssignToHostelParameter, hostelFacultyIdParameter, hasExamPassParameter, examPassFacultyIdParameter, languageIdParameter, stagParameter, workPlaceParameter, mSVuzParameter, mSCourseParameter, mSStudyFormIdParameter, passportCodeParameter, personalCodeParameter, personInfoParameter, extraInfoParameter, scienceWorkParameter, startEnglishParameter, englishMarkParameter, egeInSpbguParameter, idParameter);
        }
    
        public virtual int EgeCertificate_Insert(string number, string printNumber, string year, Nullable<System.Guid> personId, string newFIO, Nullable<bool> isImported, ObjectParameter id)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var printNumberParameter = printNumber != null ?
                new ObjectParameter("PrintNumber", printNumber) :
                new ObjectParameter("PrintNumber", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var newFIOParameter = newFIO != null ?
                new ObjectParameter("NewFIO", newFIO) :
                new ObjectParameter("NewFIO", typeof(string));
    
            var isImportedParameter = isImported.HasValue ?
                new ObjectParameter("IsImported", isImported) :
                new ObjectParameter("IsImported", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeCertificate_Insert", numberParameter, printNumberParameter, yearParameter, personIdParameter, newFIOParameter, isImportedParameter, id);
        }
    
        public virtual int EgeCertificate_Update(string number, string printNumber, string year, string newFIO, Nullable<System.Guid> id)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var printNumberParameter = printNumber != null ?
                new ObjectParameter("PrintNumber", printNumber) :
                new ObjectParameter("PrintNumber", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var newFIOParameter = newFIO != null ?
                new ObjectParameter("NewFIO", newFIO) :
                new ObjectParameter("NewFIO", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeCertificate_Update", numberParameter, printNumberParameter, yearParameter, newFIOParameter, idParameter);
        }
    
        public virtual int EgeCertificate_UpdateFBSStatus(Nullable<int> fBSStatusId, string fBSComment, Nullable<System.Guid> id)
        {
            var fBSStatusIdParameter = fBSStatusId.HasValue ?
                new ObjectParameter("FBSStatusId", fBSStatusId) :
                new ObjectParameter("FBSStatusId", typeof(int));
    
            var fBSCommentParameter = fBSComment != null ?
                new ObjectParameter("FBSComment", fBSComment) :
                new ObjectParameter("FBSComment", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeCertificate_UpdateFBSStatus", fBSStatusIdParameter, fBSCommentParameter, idParameter);
        }
    
        public virtual int EgeMark_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeMark_Delete", idParameter);
        }
    
        public virtual int EgeCertificate_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeCertificate_Delete", idParameter);
        }
    
        public virtual int AttMarks_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttMarks_Delete", idParameter);
        }
    
        public virtual int AttMarks_Insert(Nullable<System.Guid> personId, Nullable<int> attSubjectId, Nullable<int> value)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var attSubjectIdParameter = attSubjectId.HasValue ?
                new ObjectParameter("AttSubjectId", attSubjectId) :
                new ObjectParameter("AttSubjectId", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttMarks_Insert", personIdParameter, attSubjectIdParameter, valueParameter);
        }
    
        public virtual int EgeMark_Insert(Nullable<int> value, Nullable<int> egeExamNameId, Nullable<System.Guid> egeCertificateId, Nullable<bool> isAppeal, Nullable<bool> isCurrent)
        {
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var egeExamNameIdParameter = egeExamNameId.HasValue ?
                new ObjectParameter("EgeExamNameId", egeExamNameId) :
                new ObjectParameter("EgeExamNameId", typeof(int));
    
            var egeCertificateIdParameter = egeCertificateId.HasValue ?
                new ObjectParameter("EgeCertificateId", egeCertificateId) :
                new ObjectParameter("EgeCertificateId", typeof(System.Guid));
    
            var isAppealParameter = isAppeal.HasValue ?
                new ObjectParameter("IsAppeal", isAppeal) :
                new ObjectParameter("IsAppeal", typeof(bool));
    
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("IsCurrent", isCurrent) :
                new ObjectParameter("IsCurrent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeMark_Insert", valueParameter, egeExamNameIdParameter, egeCertificateIdParameter, isAppealParameter, isCurrentParameter);
        }
    
        public virtual int EgeMark_Update(Nullable<int> value, Nullable<int> egeExamNameId, Nullable<bool> isAppeal, Nullable<System.Guid> id)
        {
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var egeExamNameIdParameter = egeExamNameId.HasValue ?
                new ObjectParameter("EgeExamNameId", egeExamNameId) :
                new ObjectParameter("EgeExamNameId", typeof(int));
    
            var isAppealParameter = isAppeal.HasValue ?
                new ObjectParameter("IsAppeal", isAppeal) :
                new ObjectParameter("IsAppeal", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeMark_Update", valueParameter, egeExamNameIdParameter, isAppealParameter, idParameter);
        }
    
        public virtual int Person_UpdateExamPass(Nullable<bool> hasExamPass, Nullable<int> examPassFacultyId, Nullable<System.Guid> id)
        {
            var hasExamPassParameter = hasExamPass.HasValue ?
                new ObjectParameter("HasExamPass", hasExamPass) :
                new ObjectParameter("HasExamPass", typeof(bool));
    
            var examPassFacultyIdParameter = examPassFacultyId.HasValue ?
                new ObjectParameter("ExamPassFacultyId", examPassFacultyId) :
                new ObjectParameter("ExamPassFacultyId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_UpdateExamPass", hasExamPassParameter, examPassFacultyIdParameter, idParameter);
        }
    
        public virtual int Person_UpdateHostel(Nullable<bool> hasAssignToHostel, Nullable<int> hostelFacultyId, Nullable<System.Guid> id)
        {
            var hasAssignToHostelParameter = hasAssignToHostel.HasValue ?
                new ObjectParameter("HasAssignToHostel", hasAssignToHostel) :
                new ObjectParameter("HasAssignToHostel", typeof(bool));
    
            var hostelFacultyIdParameter = hostelFacultyId.HasValue ?
                new ObjectParameter("HostelFacultyId", hostelFacultyId) :
                new ObjectParameter("HostelFacultyId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_UpdateHostel", hasAssignToHostelParameter, hostelFacultyIdParameter, idParameter);
        }
    
        public virtual int DeleteAllOpenByHolder(string holder)
        {
            var holderParameter = holder != null ?
                new ObjectParameter("holder", holder) :
                new ObjectParameter("holder", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllOpenByHolder", holderParameter);
        }
    
        public virtual int Olympiads_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Olympiads_Delete", idParameter);
        }
    
        public virtual int CheckAbitIdent(Nullable<System.Guid> personId, Nullable<System.Guid> entryId, ObjectParameter result)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckAbitIdent", personIdParameter, entryIdParameter, result);
        }
    
        public virtual int CheckAbitIdentWithId(Nullable<System.Guid> abitId, Nullable<System.Guid> personId, Nullable<System.Guid> entryId, ObjectParameter result)
        {
            var abitIdParameter = abitId.HasValue ?
                new ObjectParameter("AbitId", abitId) :
                new ObjectParameter("AbitId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckAbitIdentWithId", abitIdParameter, personIdParameter, entryIdParameter, result);
        }
    
        public virtual int Abiturient_UpdateEntry(Nullable<System.Guid> entryId, Nullable<System.Guid> id)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateEntry", entryIdParameter, idParameter);
        }
    
        public virtual int PaidData_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaidData_Delete", idParameter);
        }
    
        public virtual int PaidData_Insert(string dogovorNum, Nullable<System.DateTime> dogovorDate, Nullable<int> dogovorTypeId, Nullable<int> prorektorId, string qualification, string srok, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateFinish, string sumFirstYear, Nullable<int> payPeriodId, string sumFirstPeriod, string abitFIORod, string parent, string parentPassport, string customer, string customerAddress, string customerPassport, string customerPassportAuthor, string customerLico, string customerReason, string customerINN, string customerRS, Nullable<System.Guid> abiturientId, string sumTotal, string srokIndividual, ObjectParameter id)
        {
            var dogovorNumParameter = dogovorNum != null ?
                new ObjectParameter("DogovorNum", dogovorNum) :
                new ObjectParameter("DogovorNum", typeof(string));
    
            var dogovorDateParameter = dogovorDate.HasValue ?
                new ObjectParameter("DogovorDate", dogovorDate) :
                new ObjectParameter("DogovorDate", typeof(System.DateTime));
    
            var dogovorTypeIdParameter = dogovorTypeId.HasValue ?
                new ObjectParameter("DogovorTypeId", dogovorTypeId) :
                new ObjectParameter("DogovorTypeId", typeof(int));
    
            var prorektorIdParameter = prorektorId.HasValue ?
                new ObjectParameter("ProrektorId", prorektorId) :
                new ObjectParameter("ProrektorId", typeof(int));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var srokParameter = srok != null ?
                new ObjectParameter("Srok", srok) :
                new ObjectParameter("Srok", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateFinishParameter = dateFinish.HasValue ?
                new ObjectParameter("DateFinish", dateFinish) :
                new ObjectParameter("DateFinish", typeof(System.DateTime));
    
            var sumFirstYearParameter = sumFirstYear != null ?
                new ObjectParameter("SumFirstYear", sumFirstYear) :
                new ObjectParameter("SumFirstYear", typeof(string));
    
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var sumFirstPeriodParameter = sumFirstPeriod != null ?
                new ObjectParameter("SumFirstPeriod", sumFirstPeriod) :
                new ObjectParameter("SumFirstPeriod", typeof(string));
    
            var abitFIORodParameter = abitFIORod != null ?
                new ObjectParameter("AbitFIORod", abitFIORod) :
                new ObjectParameter("AbitFIORod", typeof(string));
    
            var parentParameter = parent != null ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(string));
    
            var parentPassportParameter = parentPassport != null ?
                new ObjectParameter("ParentPassport", parentPassport) :
                new ObjectParameter("ParentPassport", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var customerPassportParameter = customerPassport != null ?
                new ObjectParameter("CustomerPassport", customerPassport) :
                new ObjectParameter("CustomerPassport", typeof(string));
    
            var customerPassportAuthorParameter = customerPassportAuthor != null ?
                new ObjectParameter("CustomerPassportAuthor", customerPassportAuthor) :
                new ObjectParameter("CustomerPassportAuthor", typeof(string));
    
            var customerLicoParameter = customerLico != null ?
                new ObjectParameter("CustomerLico", customerLico) :
                new ObjectParameter("CustomerLico", typeof(string));
    
            var customerReasonParameter = customerReason != null ?
                new ObjectParameter("CustomerReason", customerReason) :
                new ObjectParameter("CustomerReason", typeof(string));
    
            var customerINNParameter = customerINN != null ?
                new ObjectParameter("CustomerINN", customerINN) :
                new ObjectParameter("CustomerINN", typeof(string));
    
            var customerRSParameter = customerRS != null ?
                new ObjectParameter("CustomerRS", customerRS) :
                new ObjectParameter("CustomerRS", typeof(string));
    
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var sumTotalParameter = sumTotal != null ?
                new ObjectParameter("SumTotal", sumTotal) :
                new ObjectParameter("SumTotal", typeof(string));
    
            var srokIndividualParameter = srokIndividual != null ?
                new ObjectParameter("SrokIndividual", srokIndividual) :
                new ObjectParameter("SrokIndividual", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaidData_Insert", dogovorNumParameter, dogovorDateParameter, dogovorTypeIdParameter, prorektorIdParameter, qualificationParameter, srokParameter, dateStartParameter, dateFinishParameter, sumFirstYearParameter, payPeriodIdParameter, sumFirstPeriodParameter, abitFIORodParameter, parentParameter, parentPassportParameter, customerParameter, customerAddressParameter, customerPassportParameter, customerPassportAuthorParameter, customerLicoParameter, customerReasonParameter, customerINNParameter, customerRSParameter, abiturientIdParameter, sumTotalParameter, srokIndividualParameter, id);
        }
    
        public virtual int PaidData_Update(string dogovorNum, Nullable<System.DateTime> dogovorDate, Nullable<int> dogovorTypeId, Nullable<int> prorektorId, string qualification, string srok, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateFinish, string sumFirstYear, Nullable<int> payPeriodId, string sumFirstPeriod, string abitFIORod, string parent, string parentPassport, string customer, string customerAddress, string customerPassport, string customerPassportAuthor, string customerLico, string customerReason, string customerINN, string customerRS, string sumTotal, string srokIndividual, Nullable<System.Guid> id)
        {
            var dogovorNumParameter = dogovorNum != null ?
                new ObjectParameter("DogovorNum", dogovorNum) :
                new ObjectParameter("DogovorNum", typeof(string));
    
            var dogovorDateParameter = dogovorDate.HasValue ?
                new ObjectParameter("DogovorDate", dogovorDate) :
                new ObjectParameter("DogovorDate", typeof(System.DateTime));
    
            var dogovorTypeIdParameter = dogovorTypeId.HasValue ?
                new ObjectParameter("DogovorTypeId", dogovorTypeId) :
                new ObjectParameter("DogovorTypeId", typeof(int));
    
            var prorektorIdParameter = prorektorId.HasValue ?
                new ObjectParameter("ProrektorId", prorektorId) :
                new ObjectParameter("ProrektorId", typeof(int));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var srokParameter = srok != null ?
                new ObjectParameter("Srok", srok) :
                new ObjectParameter("Srok", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateFinishParameter = dateFinish.HasValue ?
                new ObjectParameter("DateFinish", dateFinish) :
                new ObjectParameter("DateFinish", typeof(System.DateTime));
    
            var sumFirstYearParameter = sumFirstYear != null ?
                new ObjectParameter("SumFirstYear", sumFirstYear) :
                new ObjectParameter("SumFirstYear", typeof(string));
    
            var payPeriodIdParameter = payPeriodId.HasValue ?
                new ObjectParameter("PayPeriodId", payPeriodId) :
                new ObjectParameter("PayPeriodId", typeof(int));
    
            var sumFirstPeriodParameter = sumFirstPeriod != null ?
                new ObjectParameter("SumFirstPeriod", sumFirstPeriod) :
                new ObjectParameter("SumFirstPeriod", typeof(string));
    
            var abitFIORodParameter = abitFIORod != null ?
                new ObjectParameter("AbitFIORod", abitFIORod) :
                new ObjectParameter("AbitFIORod", typeof(string));
    
            var parentParameter = parent != null ?
                new ObjectParameter("Parent", parent) :
                new ObjectParameter("Parent", typeof(string));
    
            var parentPassportParameter = parentPassport != null ?
                new ObjectParameter("ParentPassport", parentPassport) :
                new ObjectParameter("ParentPassport", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var customerAddressParameter = customerAddress != null ?
                new ObjectParameter("CustomerAddress", customerAddress) :
                new ObjectParameter("CustomerAddress", typeof(string));
    
            var customerPassportParameter = customerPassport != null ?
                new ObjectParameter("CustomerPassport", customerPassport) :
                new ObjectParameter("CustomerPassport", typeof(string));
    
            var customerPassportAuthorParameter = customerPassportAuthor != null ?
                new ObjectParameter("CustomerPassportAuthor", customerPassportAuthor) :
                new ObjectParameter("CustomerPassportAuthor", typeof(string));
    
            var customerLicoParameter = customerLico != null ?
                new ObjectParameter("CustomerLico", customerLico) :
                new ObjectParameter("CustomerLico", typeof(string));
    
            var customerReasonParameter = customerReason != null ?
                new ObjectParameter("CustomerReason", customerReason) :
                new ObjectParameter("CustomerReason", typeof(string));
    
            var customerINNParameter = customerINN != null ?
                new ObjectParameter("CustomerINN", customerINN) :
                new ObjectParameter("CustomerINN", typeof(string));
    
            var customerRSParameter = customerRS != null ?
                new ObjectParameter("CustomerRS", customerRS) :
                new ObjectParameter("CustomerRS", typeof(string));
    
            var sumTotalParameter = sumTotal != null ?
                new ObjectParameter("SumTotal", sumTotal) :
                new ObjectParameter("SumTotal", typeof(string));
    
            var srokIndividualParameter = srokIndividual != null ?
                new ObjectParameter("SrokIndividual", srokIndividual) :
                new ObjectParameter("SrokIndividual", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PaidData_Update", dogovorNumParameter, dogovorDateParameter, dogovorTypeIdParameter, prorektorIdParameter, qualificationParameter, srokParameter, dateStartParameter, dateFinishParameter, sumFirstYearParameter, payPeriodIdParameter, sumFirstPeriodParameter, abitFIORodParameter, parentParameter, parentPassportParameter, customerParameter, customerAddressParameter, customerPassportParameter, customerPassportAuthorParameter, customerLicoParameter, customerReasonParameter, customerINNParameter, customerRSParameter, sumTotalParameter, srokIndividualParameter, idParameter);
        }
    
        public virtual int ExamInEntry_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamInEntry_Delete", idParameter);
        }
    
        public virtual int ExamInEntry_Insert(Nullable<int> examId, Nullable<System.Guid> entryId, Nullable<bool> isProfil, Nullable<int> egeMin, Nullable<bool> isCrimea, Nullable<bool> isGosLine, Nullable<byte> orderNumber, Nullable<int> parentExamInEntryId, ObjectParameter id)
        {
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("examId", examId) :
                new ObjectParameter("examId", typeof(int));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("entryId", entryId) :
                new ObjectParameter("entryId", typeof(System.Guid));
    
            var isProfilParameter = isProfil.HasValue ?
                new ObjectParameter("isProfil", isProfil) :
                new ObjectParameter("isProfil", typeof(bool));
    
            var egeMinParameter = egeMin.HasValue ?
                new ObjectParameter("egeMin", egeMin) :
                new ObjectParameter("egeMin", typeof(int));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            var isGosLineParameter = isGosLine.HasValue ?
                new ObjectParameter("IsGosLine", isGosLine) :
                new ObjectParameter("IsGosLine", typeof(bool));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(byte));
    
            var parentExamInEntryIdParameter = parentExamInEntryId.HasValue ?
                new ObjectParameter("ParentExamInEntryId", parentExamInEntryId) :
                new ObjectParameter("ParentExamInEntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamInEntry_Insert", examIdParameter, entryIdParameter, isProfilParameter, egeMinParameter, isCrimeaParameter, isGosLineParameter, orderNumberParameter, parentExamInEntryIdParameter, id);
        }
    
        public virtual int ExamInEntry_Update(Nullable<int> examId, Nullable<bool> isProfil, Nullable<int> egeMin, Nullable<bool> isCrimea, Nullable<bool> isGosLine, Nullable<byte> orderNumber, Nullable<int> parentExamInEntryId, Nullable<int> id)
        {
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("examId", examId) :
                new ObjectParameter("examId", typeof(int));
    
            var isProfilParameter = isProfil.HasValue ?
                new ObjectParameter("isProfil", isProfil) :
                new ObjectParameter("isProfil", typeof(bool));
    
            var egeMinParameter = egeMin.HasValue ?
                new ObjectParameter("egeMin", egeMin) :
                new ObjectParameter("egeMin", typeof(int));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            var isGosLineParameter = isGosLine.HasValue ?
                new ObjectParameter("IsGosLine", isGosLine) :
                new ObjectParameter("IsGosLine", typeof(bool));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(byte));
    
            var parentExamInEntryIdParameter = parentExamInEntryId.HasValue ?
                new ObjectParameter("ParentExamInEntryId", parentExamInEntryId) :
                new ObjectParameter("ParentExamInEntryId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamInEntry_Update", examIdParameter, isProfilParameter, egeMinParameter, isCrimeaParameter, isGosLineParameter, orderNumberParameter, parentExamInEntryIdParameter, idParameter);
        }
    
        public virtual int Protocol_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Protocol_Delete", idParameter);
        }
    
        public virtual int ProtocolHistory_Delete(Nullable<System.Guid> abitid, Nullable<System.Guid> protocolId)
        {
            var abitidParameter = abitid.HasValue ?
                new ObjectParameter("Abitid", abitid) :
                new ObjectParameter("Abitid", typeof(System.Guid));
    
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("ProtocolId", protocolId) :
                new ObjectParameter("ProtocolId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProtocolHistory_Delete", abitidParameter, protocolIdParameter);
        }
    
        public virtual int ProtocolHistory_Insert(Nullable<System.Guid> abiturientId, Nullable<System.Guid> protocolId, Nullable<bool> excluded, Nullable<System.Guid> excludeProtocolId, Nullable<int> entryHeaderId, ObjectParameter id)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("ProtocolId", protocolId) :
                new ObjectParameter("ProtocolId", typeof(System.Guid));
    
            var excludedParameter = excluded.HasValue ?
                new ObjectParameter("Excluded", excluded) :
                new ObjectParameter("Excluded", typeof(bool));
    
            var excludeProtocolIdParameter = excludeProtocolId.HasValue ?
                new ObjectParameter("ExcludeProtocolId", excludeProtocolId) :
                new ObjectParameter("ExcludeProtocolId", typeof(System.Guid));
    
            var entryHeaderIdParameter = entryHeaderId.HasValue ?
                new ObjectParameter("EntryHeaderId", entryHeaderId) :
                new ObjectParameter("EntryHeaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProtocolHistory_Insert", abiturientIdParameter, protocolIdParameter, excludedParameter, excludeProtocolIdParameter, entryHeaderIdParameter, id);
        }
    
        public virtual int Olympiads_Insert(Nullable<int> olympTypeId, Nullable<int> olympNameId, Nullable<int> olympSubjectId, Nullable<int> olympLevelId, Nullable<int> olympValueId, Nullable<int> olympYear, Nullable<bool> originDoc, Nullable<System.Guid> abiturientId, string documentSeries, string documentNumber, Nullable<System.DateTime> documentDate, ObjectParameter id)
        {
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympNameIdParameter = olympNameId.HasValue ?
                new ObjectParameter("OlympNameId", olympNameId) :
                new ObjectParameter("OlympNameId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympValueIdParameter = olympValueId.HasValue ?
                new ObjectParameter("OlympValueId", olympValueId) :
                new ObjectParameter("OlympValueId", typeof(int));
    
            var olympYearParameter = olympYear.HasValue ?
                new ObjectParameter("OlympYear", olympYear) :
                new ObjectParameter("OlympYear", typeof(int));
    
            var originDocParameter = originDoc.HasValue ?
                new ObjectParameter("OriginDoc", originDoc) :
                new ObjectParameter("OriginDoc", typeof(bool));
    
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var documentSeriesParameter = documentSeries != null ?
                new ObjectParameter("DocumentSeries", documentSeries) :
                new ObjectParameter("DocumentSeries", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Olympiads_Insert", olympTypeIdParameter, olympNameIdParameter, olympSubjectIdParameter, olympLevelIdParameter, olympValueIdParameter, olympYearParameter, originDocParameter, abiturientIdParameter, documentSeriesParameter, documentNumberParameter, documentDateParameter, id);
        }
    
        public virtual int Olympiads_Update(Nullable<int> olympTypeId, Nullable<int> olympNameId, Nullable<int> olympSubjectId, Nullable<int> olympLevelId, Nullable<int> olympValueId, Nullable<int> olympYear, Nullable<bool> originDoc, string documentSeries, string documentNumber, Nullable<System.DateTime> documentDate, Nullable<System.Guid> id)
        {
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympNameIdParameter = olympNameId.HasValue ?
                new ObjectParameter("OlympNameId", olympNameId) :
                new ObjectParameter("OlympNameId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympValueIdParameter = olympValueId.HasValue ?
                new ObjectParameter("OlympValueId", olympValueId) :
                new ObjectParameter("OlympValueId", typeof(int));
    
            var olympYearParameter = olympYear.HasValue ?
                new ObjectParameter("OlympYear", olympYear) :
                new ObjectParameter("OlympYear", typeof(int));
    
            var originDocParameter = originDoc.HasValue ?
                new ObjectParameter("OriginDoc", originDoc) :
                new ObjectParameter("OriginDoc", typeof(bool));
    
            var documentSeriesParameter = documentSeries != null ?
                new ObjectParameter("DocumentSeries", documentSeries) :
                new ObjectParameter("DocumentSeries", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Olympiads_Update", olympTypeIdParameter, olympNameIdParameter, olympSubjectIdParameter, olympLevelIdParameter, olympValueIdParameter, olympYearParameter, originDocParameter, documentSeriesParameter, documentNumberParameter, documentDateParameter, idParameter);
        }
    
        public virtual int OlympBook_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympBook_Delete", idParameter);
        }
    
        public virtual int OlympBook_Insert(Nullable<int> olympTypeId, Nullable<int> olympNameId, Nullable<int> olympSubjectId, Nullable<int> olympLevelId, Nullable<int> olympYear, ObjectParameter id)
        {
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympNameIdParameter = olympNameId.HasValue ?
                new ObjectParameter("OlympNameId", olympNameId) :
                new ObjectParameter("OlympNameId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympYearParameter = olympYear.HasValue ?
                new ObjectParameter("OlympYear", olympYear) :
                new ObjectParameter("OlympYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympBook_Insert", olympTypeIdParameter, olympNameIdParameter, olympSubjectIdParameter, olympLevelIdParameter, olympYearParameter, id);
        }
    
        public virtual int EgeMark_UpdateCurMark(Nullable<bool> isCurrent, Nullable<System.Guid> id)
        {
            var isCurrentParameter = isCurrent.HasValue ?
                new ObjectParameter("IsCurrent", isCurrent) :
                new ObjectParameter("IsCurrent", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeMark_UpdateCurMark", isCurrentParameter, idParameter);
        }
    
        public virtual int Delete(string tableName, string id)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete", tableNameParameter, idParameter);
        }
    
        public virtual int Get_IsOpen(string table, string id, ObjectParameter result)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_IsOpen", tableParameter, idParameter, result);
        }
    
        public virtual int Get_OpenHolder(string table, string id, ObjectParameter result)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get_OpenHolder", tableParameter, idParameter, result);
        }
    
        public virtual int GetFacultyId(ObjectParameter result)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFacultyId", result);
        }
    
        public virtual int HasRightsForFaculty(string facId, ObjectParameter result)
        {
            var facIdParameter = facId != null ?
                new ObjectParameter("facId", facId) :
                new ObjectParameter("facId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HasRightsForFaculty", facIdParameter, result);
        }
    
        public virtual int Set_IsOpen(string table, string id, Nullable<bool> value, string holderName)
        {
            var tableParameter = table != null ?
                new ObjectParameter("table", table) :
                new ObjectParameter("table", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(bool));
    
            var holderNameParameter = holderName != null ?
                new ObjectParameter("holderName", holderName) :
                new ObjectParameter("holderName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Set_IsOpen", tableParameter, idParameter, valueParameter, holderNameParameter);
        }
    
        public virtual int Abiturient_UpdateBackDoc(Nullable<bool> backDoc, Nullable<System.DateTime> backDocDate, Nullable<System.Guid> id)
        {
            var backDocParameter = backDoc.HasValue ?
                new ObjectParameter("BackDoc", backDoc) :
                new ObjectParameter("BackDoc", typeof(bool));
    
            var backDocDateParameter = backDocDate.HasValue ?
                new ObjectParameter("BackDocDate", backDocDate) :
                new ObjectParameter("BackDocDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateBackDoc", backDocParameter, backDocDateParameter, idParameter);
        }
    
        public virtual int Abiturient_UpdatePriority(Nullable<double> priority, Nullable<System.Guid> id)
        {
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdatePriority", priorityParameter, idParameter);
        }
    
        public virtual int Exam_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Exam_Delete", idParameter);
        }
    
        public virtual int Exam_Insert(Nullable<int> examNameId, Nullable<bool> isAdditional, Nullable<bool> isPortfolioAnonymPart, Nullable<bool> isPortfolioCommonPart, ObjectParameter id)
        {
            var examNameIdParameter = examNameId.HasValue ?
                new ObjectParameter("ExamNameId", examNameId) :
                new ObjectParameter("ExamNameId", typeof(int));
    
            var isAdditionalParameter = isAdditional.HasValue ?
                new ObjectParameter("isAdditional", isAdditional) :
                new ObjectParameter("isAdditional", typeof(bool));
    
            var isPortfolioAnonymPartParameter = isPortfolioAnonymPart.HasValue ?
                new ObjectParameter("IsPortfolioAnonymPart", isPortfolioAnonymPart) :
                new ObjectParameter("IsPortfolioAnonymPart", typeof(bool));
    
            var isPortfolioCommonPartParameter = isPortfolioCommonPart.HasValue ?
                new ObjectParameter("IsPortfolioCommonPart", isPortfolioCommonPart) :
                new ObjectParameter("IsPortfolioCommonPart", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Exam_Insert", examNameIdParameter, isAdditionalParameter, isPortfolioAnonymPartParameter, isPortfolioCommonPartParameter, id);
        }
    
        public virtual int Exam_Update(Nullable<int> examNameId, Nullable<bool> isAdditional, Nullable<bool> isPortfolioAnonymPart, Nullable<bool> isPortfolioCommonPart, Nullable<int> id)
        {
            var examNameIdParameter = examNameId.HasValue ?
                new ObjectParameter("ExamNameId", examNameId) :
                new ObjectParameter("ExamNameId", typeof(int));
    
            var isAdditionalParameter = isAdditional.HasValue ?
                new ObjectParameter("isAdditional", isAdditional) :
                new ObjectParameter("isAdditional", typeof(bool));
    
            var isPortfolioAnonymPartParameter = isPortfolioAnonymPart.HasValue ?
                new ObjectParameter("IsPortfolioAnonymPart", isPortfolioAnonymPart) :
                new ObjectParameter("IsPortfolioAnonymPart", typeof(bool));
    
            var isPortfolioCommonPartParameter = isPortfolioCommonPart.HasValue ?
                new ObjectParameter("IsPortfolioCommonPart", isPortfolioCommonPart) :
                new ObjectParameter("IsPortfolioCommonPart", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Exam_Update", examNameIdParameter, isAdditionalParameter, isPortfolioAnonymPartParameter, isPortfolioCommonPartParameter, idParameter);
        }
    
        public virtual int OlympName_Insert(string olympName, Nullable<int> olympNumber, ObjectParameter id)
        {
            var olympNameParameter = olympName != null ?
                new ObjectParameter("OlympName", olympName) :
                new ObjectParameter("OlympName", typeof(string));
    
            var olympNumberParameter = olympNumber.HasValue ?
                new ObjectParameter("OlympNumber", olympNumber) :
                new ObjectParameter("OlympNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympName_Insert", olympNameParameter, olympNumberParameter, id);
        }
    
        public virtual int OlympSubject_Insert(string olympSubjName, string nameDative, ObjectParameter id)
        {
            var olympSubjNameParameter = olympSubjName != null ?
                new ObjectParameter("OlympSubjName", olympSubjName) :
                new ObjectParameter("OlympSubjName", typeof(string));
    
            var nameDativeParameter = nameDative != null ?
                new ObjectParameter("NameDative", nameDative) :
                new ObjectParameter("NameDative", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympSubject_Insert", olympSubjNameParameter, nameDativeParameter, id);
        }
    
        public virtual int Abiturient_UpdateCompetititon(Nullable<int> competitionId, Nullable<int> otherCompetitionId, Nullable<bool> compFromOlymp, Nullable<System.Guid> id)
        {
            var competitionIdParameter = competitionId.HasValue ?
                new ObjectParameter("CompetitionId", competitionId) :
                new ObjectParameter("CompetitionId", typeof(int));
    
            var otherCompetitionIdParameter = otherCompetitionId.HasValue ?
                new ObjectParameter("OtherCompetitionId", otherCompetitionId) :
                new ObjectParameter("OtherCompetitionId", typeof(int));
    
            var compFromOlympParameter = compFromOlymp.HasValue ?
                new ObjectParameter("CompFromOlymp", compFromOlymp) :
                new ObjectParameter("CompFromOlymp", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateCompetititon", competitionIdParameter, otherCompetitionIdParameter, compFromOlympParameter, idParameter);
        }
    
        public virtual int Protocol_UpdateIsOld(Nullable<bool> isOld, Nullable<System.Guid> id)
        {
            var isOldParameter = isOld.HasValue ?
                new ObjectParameter("IsOld", isOld) :
                new ObjectParameter("IsOld", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Protocol_UpdateIsOld", isOldParameter, idParameter);
        }
    
        public virtual int Mark_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Delete", idParameter);
        }
    
        public virtual int Mark_Insert(Nullable<System.Guid> abiturientId, Nullable<System.Guid> examInEntryBlockUnitId, Nullable<decimal> value, Nullable<System.DateTime> passDate, Nullable<bool> isFromEge, Nullable<bool> isFromOlymp, Nullable<bool> isManual, Nullable<System.Guid> examVedId, Nullable<System.Guid> olympiadId, Nullable<System.Guid> egeCertificateId)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var examInEntryBlockUnitIdParameter = examInEntryBlockUnitId.HasValue ?
                new ObjectParameter("ExamInEntryBlockUnitId", examInEntryBlockUnitId) :
                new ObjectParameter("ExamInEntryBlockUnitId", typeof(System.Guid));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var passDateParameter = passDate.HasValue ?
                new ObjectParameter("passDate", passDate) :
                new ObjectParameter("passDate", typeof(System.DateTime));
    
            var isFromEgeParameter = isFromEge.HasValue ?
                new ObjectParameter("IsFromEge", isFromEge) :
                new ObjectParameter("IsFromEge", typeof(bool));
    
            var isFromOlympParameter = isFromOlymp.HasValue ?
                new ObjectParameter("IsFromOlymp", isFromOlymp) :
                new ObjectParameter("IsFromOlymp", typeof(bool));
    
            var isManualParameter = isManual.HasValue ?
                new ObjectParameter("IsManual", isManual) :
                new ObjectParameter("IsManual", typeof(bool));
    
            var examVedIdParameter = examVedId.HasValue ?
                new ObjectParameter("ExamVedId", examVedId) :
                new ObjectParameter("ExamVedId", typeof(System.Guid));
    
            var olympiadIdParameter = olympiadId.HasValue ?
                new ObjectParameter("OlympiadId", olympiadId) :
                new ObjectParameter("OlympiadId", typeof(System.Guid));
    
            var egeCertificateIdParameter = egeCertificateId.HasValue ?
                new ObjectParameter("EgeCertificateId", egeCertificateId) :
                new ObjectParameter("EgeCertificateId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_Insert", abiturientIdParameter, examInEntryBlockUnitIdParameter, valueParameter, passDateParameter, isFromEgeParameter, isFromOlympParameter, isManualParameter, examVedIdParameter, olympiadIdParameter, egeCertificateIdParameter);
        }
    
        public virtual int Mark_DeleteByAbitExamId(Nullable<System.Guid> abiturientId, Nullable<System.Guid> examInEntryBlockUnitId)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var examInEntryBlockUnitIdParameter = examInEntryBlockUnitId.HasValue ?
                new ObjectParameter("ExamInEntryBlockUnitId", examInEntryBlockUnitId) :
                new ObjectParameter("ExamInEntryBlockUnitId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_DeleteByAbitExamId", abiturientIdParameter, examInEntryBlockUnitIdParameter);
        }
    
        public virtual int Abiturient_UpdateChecked(Nullable<bool> @checked, Nullable<System.Guid> id)
        {
            var checkedParameter = @checked.HasValue ?
                new ObjectParameter("Checked", @checked) :
                new ObjectParameter("Checked", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateChecked", checkedParameter, idParameter);
        }
    
        public virtual int ProtocolHistory_UpdateExcluded(Nullable<System.Guid> abiturientId, Nullable<System.Guid> protocolId, Nullable<bool> excluded, Nullable<System.Guid> excludeProtocolId)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("ProtocolId", protocolId) :
                new ObjectParameter("ProtocolId", typeof(System.Guid));
    
            var excludedParameter = excluded.HasValue ?
                new ObjectParameter("Excluded", excluded) :
                new ObjectParameter("Excluded", typeof(bool));
    
            var excludeProtocolIdParameter = excludeProtocolId.HasValue ?
                new ObjectParameter("ExcludeProtocolId", excludeProtocolId) :
                new ObjectParameter("ExcludeProtocolId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProtocolHistory_UpdateExcluded", abiturientIdParameter, protocolIdParameter, excludedParameter, excludeProtocolIdParameter);
        }
    
        public virtual int ExamsVed_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_Delete", idParameter);
        }
    
        public virtual int ExamsVed_UpdateDate(Nullable<System.DateTime> date, Nullable<System.Guid> id)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_UpdateDate", dateParameter, idParameter);
        }
    
        public virtual int ExamsVedHistory_DeleteByVedId(Nullable<System.Guid> examsVedid)
        {
            var examsVedidParameter = examsVedid.HasValue ?
                new ObjectParameter("ExamsVedid", examsVedid) :
                new ObjectParameter("ExamsVedid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_DeleteByVedId", examsVedidParameter);
        }
    
        public virtual int ExamsVedHistory_InsertToVed(Nullable<System.Guid> examsVedId, Nullable<System.Guid> personId)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_InsertToVed", examsVedIdParameter, personIdParameter);
        }
    
        public virtual int ExamsVed_Insert(Nullable<int> studyLevelGroupId, Nullable<int> facultyId, Nullable<int> studyBasisId, Nullable<System.DateTime> date, Nullable<int> examId, Nullable<bool> isLocked, Nullable<bool> isLoad, Nullable<bool> isAdd, Nullable<int> addCount, ObjectParameter id)
        {
            var studyLevelGroupIdParameter = studyLevelGroupId.HasValue ?
                new ObjectParameter("StudyLevelGroupId", studyLevelGroupId) :
                new ObjectParameter("StudyLevelGroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("ExamId", examId) :
                new ObjectParameter("ExamId", typeof(int));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("IsLocked", isLocked) :
                new ObjectParameter("IsLocked", typeof(bool));
    
            var isLoadParameter = isLoad.HasValue ?
                new ObjectParameter("IsLoad", isLoad) :
                new ObjectParameter("IsLoad", typeof(bool));
    
            var isAddParameter = isAdd.HasValue ?
                new ObjectParameter("IsAdd", isAdd) :
                new ObjectParameter("IsAdd", typeof(bool));
    
            var addCountParameter = addCount.HasValue ?
                new ObjectParameter("AddCount", addCount) :
                new ObjectParameter("AddCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_Insert", studyLevelGroupIdParameter, facultyIdParameter, studyBasisIdParameter, dateParameter, examIdParameter, isLockedParameter, isLoadParameter, isAddParameter, addCountParameter, id);
        }
    
        public virtual int ExamsVed_UpdateLoad(Nullable<bool> isLoad, Nullable<System.Guid> id)
        {
            var isLoadParameter = isLoad.HasValue ?
                new ObjectParameter("isLoad", isLoad) :
                new ObjectParameter("isLoad", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_UpdateLoad", isLoadParameter, idParameter);
        }
    
        public virtual int ExamsVed_UpdateLock(Nullable<bool> isLocked, Nullable<System.Guid> id)
        {
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("isLocked", isLocked) :
                new ObjectParameter("isLocked", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_UpdateLock", isLockedParameter, idParameter);
        }
    
        public virtual int ExamsVedHistory_UpdateNumber(Nullable<System.Guid> examsVedId, Nullable<System.Guid> personId, Nullable<int> pvNumber)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var pvNumberParameter = pvNumber.HasValue ?
                new ObjectParameter("pvNumber", pvNumber) :
                new ObjectParameter("pvNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_UpdateNumber", examsVedIdParameter, personIdParameter, pvNumberParameter);
        }
    
        public virtual int ExamsVedHistory_DeleteByPersonAndVedId(Nullable<System.Guid> examsVedid, Nullable<System.Guid> personId)
        {
            var examsVedidParameter = examsVedid.HasValue ?
                new ObjectParameter("ExamsVedid", examsVedid) :
                new ObjectParameter("ExamsVedid", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_DeleteByPersonAndVedId", examsVedidParameter, personIdParameter);
        }
    
        public virtual int Mark_DeleteByExamVedId(Nullable<System.Guid> examVedId)
        {
            var examVedIdParameter = examVedId.HasValue ?
                new ObjectParameter("ExamVedId", examVedId) :
                new ObjectParameter("ExamVedId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_DeleteByExamVedId", examVedIdParameter);
        }
    
        public virtual int ExamsVedRoom_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedRoom_Delete", idParameter);
        }
    
        public virtual int ExamsVedRoomHistory_DeleteByVedRoomId(Nullable<System.Guid> examsVedRoomId)
        {
            var examsVedRoomIdParameter = examsVedRoomId.HasValue ?
                new ObjectParameter("ExamsVedRoomId", examsVedRoomId) :
                new ObjectParameter("ExamsVedRoomId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedRoomHistory_DeleteByVedRoomId", examsVedRoomIdParameter);
        }
    
        public virtual int ExamsVedRoom_Insert(Nullable<System.Guid> examsVedId, string roomNumber, Nullable<int> number, ObjectParameter id)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var roomNumberParameter = roomNumber != null ?
                new ObjectParameter("RoomNumber", roomNumber) :
                new ObjectParameter("RoomNumber", typeof(string));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedRoom_Insert", examsVedIdParameter, roomNumberParameter, numberParameter, id);
        }
    
        public virtual int ExamsVedRoomHistory_InsertToVed(Nullable<System.Guid> examsVedRoomId, Nullable<System.Guid> personId)
        {
            var examsVedRoomIdParameter = examsVedRoomId.HasValue ?
                new ObjectParameter("ExamsVedRoomId", examsVedRoomId) :
                new ObjectParameter("ExamsVedRoomId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedRoomHistory_InsertToVed", examsVedRoomIdParameter, personIdParameter);
        }
    
        public virtual int ExamInEntry_UpdateMinEge(Nullable<int> egeMin, Nullable<int> id)
        {
            var egeMinParameter = egeMin.HasValue ?
                new ObjectParameter("egeMin", egeMin) :
                new ObjectParameter("egeMin", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamInEntry_UpdateMinEge", egeMinParameter, idParameter);
        }
    
        public virtual int Abiturient_Insert(Nullable<System.Guid> personId, Nullable<System.Guid> entryId, Nullable<int> competitionId, Nullable<bool> isListener, Nullable<bool> withHE, Nullable<bool> isPaid, Nullable<bool> backDoc, Nullable<System.DateTime> backDocDate, Nullable<System.DateTime> docDate, Nullable<System.DateTime> docInsertDate, Nullable<bool> @checked, Nullable<bool> notEnabled, Nullable<double> coefficient, Nullable<int> otherCompetitionId, Nullable<int> celCompetitionId, string celCompetitionText, Nullable<int> languageId, Nullable<bool> hasOriginals, Nullable<double> priority, Nullable<int> barcode, Nullable<System.Guid> commitId, Nullable<int> commitNumber, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var competitionIdParameter = competitionId.HasValue ?
                new ObjectParameter("CompetitionId", competitionId) :
                new ObjectParameter("CompetitionId", typeof(int));
    
            var isListenerParameter = isListener.HasValue ?
                new ObjectParameter("IsListener", isListener) :
                new ObjectParameter("IsListener", typeof(bool));
    
            var withHEParameter = withHE.HasValue ?
                new ObjectParameter("WithHE", withHE) :
                new ObjectParameter("WithHE", typeof(bool));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var backDocParameter = backDoc.HasValue ?
                new ObjectParameter("BackDoc", backDoc) :
                new ObjectParameter("BackDoc", typeof(bool));
    
            var backDocDateParameter = backDocDate.HasValue ?
                new ObjectParameter("BackDocDate", backDocDate) :
                new ObjectParameter("BackDocDate", typeof(System.DateTime));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var docInsertDateParameter = docInsertDate.HasValue ?
                new ObjectParameter("DocInsertDate", docInsertDate) :
                new ObjectParameter("DocInsertDate", typeof(System.DateTime));
    
            var checkedParameter = @checked.HasValue ?
                new ObjectParameter("Checked", @checked) :
                new ObjectParameter("Checked", typeof(bool));
    
            var notEnabledParameter = notEnabled.HasValue ?
                new ObjectParameter("NotEnabled", notEnabled) :
                new ObjectParameter("NotEnabled", typeof(bool));
    
            var coefficientParameter = coefficient.HasValue ?
                new ObjectParameter("Coefficient", coefficient) :
                new ObjectParameter("Coefficient", typeof(double));
    
            var otherCompetitionIdParameter = otherCompetitionId.HasValue ?
                new ObjectParameter("OtherCompetitionId", otherCompetitionId) :
                new ObjectParameter("OtherCompetitionId", typeof(int));
    
            var celCompetitionIdParameter = celCompetitionId.HasValue ?
                new ObjectParameter("CelCompetitionId", celCompetitionId) :
                new ObjectParameter("CelCompetitionId", typeof(int));
    
            var celCompetitionTextParameter = celCompetitionText != null ?
                new ObjectParameter("CelCompetitionText", celCompetitionText) :
                new ObjectParameter("CelCompetitionText", typeof(string));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var hasOriginalsParameter = hasOriginals.HasValue ?
                new ObjectParameter("HasOriginals", hasOriginals) :
                new ObjectParameter("HasOriginals", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(double));
    
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(int));
    
            var commitIdParameter = commitId.HasValue ?
                new ObjectParameter("CommitId", commitId) :
                new ObjectParameter("CommitId", typeof(System.Guid));
    
            var commitNumberParameter = commitNumber.HasValue ?
                new ObjectParameter("CommitNumber", commitNumber) :
                new ObjectParameter("CommitNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_Insert", personIdParameter, entryIdParameter, competitionIdParameter, isListenerParameter, withHEParameter, isPaidParameter, backDocParameter, backDocDateParameter, docDateParameter, docInsertDateParameter, checkedParameter, notEnabledParameter, coefficientParameter, otherCompetitionIdParameter, celCompetitionIdParameter, celCompetitionTextParameter, languageIdParameter, hasOriginalsParameter, priorityParameter, barcodeParameter, commitIdParameter, commitNumberParameter, id);
        }
    
        public virtual int Abiturient_UpdateWithoutEntry(Nullable<int> competitionId, Nullable<bool> isListener, Nullable<bool> withHE, Nullable<bool> isPaid, Nullable<bool> backDoc, Nullable<System.DateTime> backDocDate, Nullable<System.DateTime> docDate, Nullable<bool> @checked, Nullable<bool> notEnabled, Nullable<double> coefficient, Nullable<int> otherCompetitionId, Nullable<int> celCompetitionId, string celCompetitionText, Nullable<int> languageId, Nullable<bool> hasOriginals, Nullable<double> priority, Nullable<System.Guid> id)
        {
            var competitionIdParameter = competitionId.HasValue ?
                new ObjectParameter("CompetitionId", competitionId) :
                new ObjectParameter("CompetitionId", typeof(int));
    
            var isListenerParameter = isListener.HasValue ?
                new ObjectParameter("IsListener", isListener) :
                new ObjectParameter("IsListener", typeof(bool));
    
            var withHEParameter = withHE.HasValue ?
                new ObjectParameter("WithHE", withHE) :
                new ObjectParameter("WithHE", typeof(bool));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var backDocParameter = backDoc.HasValue ?
                new ObjectParameter("BackDoc", backDoc) :
                new ObjectParameter("BackDoc", typeof(bool));
    
            var backDocDateParameter = backDocDate.HasValue ?
                new ObjectParameter("BackDocDate", backDocDate) :
                new ObjectParameter("BackDocDate", typeof(System.DateTime));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var checkedParameter = @checked.HasValue ?
                new ObjectParameter("Checked", @checked) :
                new ObjectParameter("Checked", typeof(bool));
    
            var notEnabledParameter = notEnabled.HasValue ?
                new ObjectParameter("NotEnabled", notEnabled) :
                new ObjectParameter("NotEnabled", typeof(bool));
    
            var coefficientParameter = coefficient.HasValue ?
                new ObjectParameter("Coefficient", coefficient) :
                new ObjectParameter("Coefficient", typeof(double));
    
            var otherCompetitionIdParameter = otherCompetitionId.HasValue ?
                new ObjectParameter("OtherCompetitionId", otherCompetitionId) :
                new ObjectParameter("OtherCompetitionId", typeof(int));
    
            var celCompetitionIdParameter = celCompetitionId.HasValue ?
                new ObjectParameter("CelCompetitionId", celCompetitionId) :
                new ObjectParameter("CelCompetitionId", typeof(int));
    
            var celCompetitionTextParameter = celCompetitionText != null ?
                new ObjectParameter("CelCompetitionText", celCompetitionText) :
                new ObjectParameter("CelCompetitionText", typeof(string));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var hasOriginalsParameter = hasOriginals.HasValue ?
                new ObjectParameter("HasOriginals", hasOriginals) :
                new ObjectParameter("HasOriginals", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(double));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateWithoutEntry", competitionIdParameter, isListenerParameter, withHEParameter, isPaidParameter, backDocParameter, backDocDateParameter, docDateParameter, checkedParameter, notEnabledParameter, coefficientParameter, otherCompetitionIdParameter, celCompetitionIdParameter, celCompetitionTextParameter, languageIdParameter, hasOriginalsParameter, priorityParameter, idParameter);
        }
    
        public virtual int Entry_Insert(Nullable<System.Guid> id, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> obrazProgramId, Nullable<int> profileId, Nullable<int> studyBasisId, Nullable<int> studyFormId, Nullable<int> studyLevelId, Nullable<System.Guid> studyPlanId, string studyPlanNumber, string programModeShortName, Nullable<bool> isSecond, Nullable<bool> isReduced, Nullable<bool> isParallel, Nullable<int> kCP, Nullable<int> comissionId, Nullable<bool> isForeign, Nullable<bool> isCrimea)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var obrazProgramIdParameter = obrazProgramId.HasValue ?
                new ObjectParameter("ObrazProgramId", obrazProgramId) :
                new ObjectParameter("ObrazProgramId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var studyLevelIdParameter = studyLevelId.HasValue ?
                new ObjectParameter("StudyLevelId", studyLevelId) :
                new ObjectParameter("StudyLevelId", typeof(int));
    
            var studyPlanIdParameter = studyPlanId.HasValue ?
                new ObjectParameter("StudyPlanId", studyPlanId) :
                new ObjectParameter("StudyPlanId", typeof(System.Guid));
    
            var studyPlanNumberParameter = studyPlanNumber != null ?
                new ObjectParameter("StudyPlanNumber", studyPlanNumber) :
                new ObjectParameter("StudyPlanNumber", typeof(string));
    
            var programModeShortNameParameter = programModeShortName != null ?
                new ObjectParameter("ProgramModeShortName", programModeShortName) :
                new ObjectParameter("ProgramModeShortName", typeof(string));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var isReducedParameter = isReduced.HasValue ?
                new ObjectParameter("IsReduced", isReduced) :
                new ObjectParameter("IsReduced", typeof(bool));
    
            var isParallelParameter = isParallel.HasValue ?
                new ObjectParameter("IsParallel", isParallel) :
                new ObjectParameter("IsParallel", typeof(bool));
    
            var kCPParameter = kCP.HasValue ?
                new ObjectParameter("KCP", kCP) :
                new ObjectParameter("KCP", typeof(int));
    
            var comissionIdParameter = comissionId.HasValue ?
                new ObjectParameter("ComissionId", comissionId) :
                new ObjectParameter("ComissionId", typeof(int));
    
            var isForeignParameter = isForeign.HasValue ?
                new ObjectParameter("IsForeign", isForeign) :
                new ObjectParameter("IsForeign", typeof(bool));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Entry_Insert", idParameter, facultyIdParameter, licenseProgramIdParameter, obrazProgramIdParameter, profileIdParameter, studyBasisIdParameter, studyFormIdParameter, studyLevelIdParameter, studyPlanIdParameter, studyPlanNumberParameter, programModeShortNameParameter, isSecondParameter, isReducedParameter, isParallelParameter, kCPParameter, comissionIdParameter, isForeignParameter, isCrimeaParameter);
        }
    
        public virtual int Protocol_Insert(Nullable<int> studyLevelGroupId, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> studyFormId, Nullable<int> studyBasisId, string number, Nullable<System.DateTime> date, Nullable<int> protocolTypeId, string reason, Nullable<bool> isOld, Nullable<System.Guid> parentProtocolId, Nullable<bool> isSecond, Nullable<bool> isListener, Nullable<bool> isForeign, ObjectParameter id)
        {
            var studyLevelGroupIdParameter = studyLevelGroupId.HasValue ?
                new ObjectParameter("StudyLevelGroupId", studyLevelGroupId) :
                new ObjectParameter("StudyLevelGroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var protocolTypeIdParameter = protocolTypeId.HasValue ?
                new ObjectParameter("ProtocolTypeId", protocolTypeId) :
                new ObjectParameter("ProtocolTypeId", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var isOldParameter = isOld.HasValue ?
                new ObjectParameter("IsOld", isOld) :
                new ObjectParameter("IsOld", typeof(bool));
    
            var parentProtocolIdParameter = parentProtocolId.HasValue ?
                new ObjectParameter("ParentProtocolId", parentProtocolId) :
                new ObjectParameter("ParentProtocolId", typeof(System.Guid));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var isListenerParameter = isListener.HasValue ?
                new ObjectParameter("IsListener", isListener) :
                new ObjectParameter("IsListener", typeof(bool));
    
            var isForeignParameter = isForeign.HasValue ?
                new ObjectParameter("IsForeign", isForeign) :
                new ObjectParameter("IsForeign", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Protocol_Insert", studyLevelGroupIdParameter, facultyIdParameter, licenseProgramIdParameter, studyFormIdParameter, studyBasisIdParameter, numberParameter, dateParameter, protocolTypeIdParameter, reasonParameter, isOldParameter, parentProtocolIdParameter, isSecondParameter, isListenerParameter, isForeignParameter, id);
        }
    
        public virtual int Entry_UpdateKC(Nullable<System.Guid> id, Nullable<int> kCP, Nullable<int> kCPQuota)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var kCPParameter = kCP.HasValue ?
                new ObjectParameter("KCP", kCP) :
                new ObjectParameter("KCP", typeof(int));
    
            var kCPQuotaParameter = kCPQuota.HasValue ?
                new ObjectParameter("KCPQuota", kCPQuota) :
                new ObjectParameter("KCPQuota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Entry_UpdateKC", idParameter, kCPParameter, kCPQuotaParameter);
        }
    
        public virtual int Entry_UpdateCEl(Nullable<System.Guid> id, Nullable<int> kCPCel)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var kCPCelParameter = kCPCel.HasValue ?
                new ObjectParameter("KCPCel", kCPCel) :
                new ObjectParameter("KCPCel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Entry_UpdateCEl", idParameter, kCPCelParameter);
        }
    
        public virtual int DocInventory_Insert(Nullable<System.Guid> abiturientId, Nullable<int> abitDocId, string comment)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var abitDocIdParameter = abitDocId.HasValue ?
                new ObjectParameter("AbitDocId", abitDocId) :
                new ObjectParameter("AbitDocId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocInventory_Insert", abiturientIdParameter, abitDocIdParameter, commentParameter);
        }
    
        public virtual int DocInventory_Delete(Nullable<System.Guid> abitId, Nullable<int> abitDocId)
        {
            var abitIdParameter = abitId.HasValue ?
                new ObjectParameter("AbitId", abitId) :
                new ObjectParameter("AbitId", typeof(System.Guid));
    
            var abitDocIdParameter = abitDocId.HasValue ?
                new ObjectParameter("AbitDocId", abitDocId) :
                new ObjectParameter("AbitDocId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocInventory_Delete", abitIdParameter, abitDocIdParameter);
        }
    
        public virtual int Abiturient_UpdateHasOriginals(Nullable<bool> hasOriginals, Nullable<System.Guid> id)
        {
            var hasOriginalsParameter = hasOriginals.HasValue ?
                new ObjectParameter("HasOriginals", hasOriginals) :
                new ObjectParameter("HasOriginals", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateHasOriginals", hasOriginalsParameter, idParameter);
        }
    
        public virtual int EgeMark_DeleteByCertId(Nullable<System.Guid> certid)
        {
            var certidParameter = certid.HasValue ?
                new ObjectParameter("Certid", certid) :
                new ObjectParameter("Certid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EgeMark_DeleteByCertId", certidParameter);
        }
    
        public virtual int ExamsVedHistory_UpdateMark(Nullable<System.Guid> examsVedId, Nullable<System.Guid> personId, Nullable<int> personvednumber, Nullable<decimal> mark)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var personvednumberParameter = personvednumber.HasValue ?
                new ObjectParameter("personvednumber", personvednumber) :
                new ObjectParameter("personvednumber", typeof(int));
    
            var markParameter = mark.HasValue ?
                new ObjectParameter("Mark", mark) :
                new ObjectParameter("Mark", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_UpdateMark", examsVedIdParameter, personIdParameter, personvednumberParameter, markParameter);
        }
    
        public virtual int ExamsVedHistory_UpdateMarkOral(Nullable<System.Guid> examsVedId, Nullable<System.Guid> personId, Nullable<int> personvednumber, Nullable<decimal> markOral)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var personvednumberParameter = personvednumber.HasValue ?
                new ObjectParameter("personvednumber", personvednumber) :
                new ObjectParameter("personvednumber", typeof(int));
    
            var markOralParameter = markOral.HasValue ?
                new ObjectParameter("MarkOral", markOral) :
                new ObjectParameter("MarkOral", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_UpdateMarkOral", examsVedIdParameter, personIdParameter, personvednumberParameter, markOralParameter);
        }
    
        public virtual int ExamsVedHistory_UpdateMarkAppeal(Nullable<System.Guid> examsVedId, Nullable<System.Guid> personId, Nullable<int> personvednumber, Nullable<decimal> markAppeal)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var personvednumberParameter = personvednumber.HasValue ?
                new ObjectParameter("personvednumber", personvednumber) :
                new ObjectParameter("personvednumber", typeof(int));
    
            var markAppealParameter = markAppeal.HasValue ?
                new ObjectParameter("MarkAppeal", markAppeal) :
                new ObjectParameter("MarkAppeal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_UpdateMarkAppeal", examsVedIdParameter, personIdParameter, personvednumberParameter, markAppealParameter);
        }
    
        public virtual int ExamsVedHistory_UpdateMarkOralAppeal(Nullable<System.Guid> examsVedId, Nullable<System.Guid> personId, Nullable<int> personvednumber, Nullable<decimal> markOralAppeal)
        {
            var examsVedIdParameter = examsVedId.HasValue ?
                new ObjectParameter("ExamsVedId", examsVedId) :
                new ObjectParameter("ExamsVedId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var personvednumberParameter = personvednumber.HasValue ?
                new ObjectParameter("personvednumber", personvednumber) :
                new ObjectParameter("personvednumber", typeof(int));
    
            var markOralAppealParameter = markOralAppeal.HasValue ?
                new ObjectParameter("MarkOralAppeal", markOralAppeal) :
                new ObjectParameter("MarkOralAppeal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVedHistory_UpdateMarkOralAppeal", examsVedIdParameter, personIdParameter, personvednumberParameter, markOralAppealParameter);
        }
    
        public virtual int Mark_updateByAbVedId(Nullable<System.Guid> abiturientId, Nullable<System.Guid> examInEntryBlockUnitId, Nullable<decimal> value, Nullable<System.DateTime> passDate, Nullable<System.Guid> examVedId)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var examInEntryBlockUnitIdParameter = examInEntryBlockUnitId.HasValue ?
                new ObjectParameter("ExamInEntryBlockUnitId", examInEntryBlockUnitId) :
                new ObjectParameter("ExamInEntryBlockUnitId", typeof(System.Guid));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(decimal));
    
            var passDateParameter = passDate.HasValue ?
                new ObjectParameter("passDate", passDate) :
                new ObjectParameter("passDate", typeof(System.DateTime));
    
            var examVedIdParameter = examVedId.HasValue ?
                new ObjectParameter("ExamVedId", examVedId) :
                new ObjectParameter("ExamVedId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Mark_updateByAbVedId", abiturientIdParameter, examInEntryBlockUnitIdParameter, valueParameter, passDateParameter, examVedIdParameter);
        }
    
        public virtual int Fixieren_DeleteByFVId(Nullable<System.Guid> fVid)
        {
            var fVidParameter = fVid.HasValue ?
                new ObjectParameter("FVid", fVid) :
                new ObjectParameter("FVid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fixieren_DeleteByFVId", fVidParameter);
        }
    
        public virtual int Fixieren_Insert(Nullable<int> number, Nullable<System.Guid> abiturientId, Nullable<System.Guid> fixierenViewId)
        {
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var fixierenViewIdParameter = fixierenViewId.HasValue ?
                new ObjectParameter("FixierenViewId", fixierenViewId) :
                new ObjectParameter("FixierenViewId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fixieren_Insert", numberParameter, abiturientIdParameter, fixierenViewIdParameter);
        }
    
        public virtual int FixierenView_Delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixierenView_Delete", idParameter);
        }
    
        public virtual int FixierenView_Insert(Nullable<int> studyLevelGroupId, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> obrazProgramId, Nullable<int> profileId, Nullable<int> studyBasisId, Nullable<int> studyFormId, Nullable<bool> isSecond, Nullable<bool> isReduced, Nullable<bool> isParallel, Nullable<bool> isCel, Nullable<int> docNum, Nullable<bool> locked, Nullable<bool> isCrimea, Nullable<bool> isQuota, ObjectParameter id)
        {
            var studyLevelGroupIdParameter = studyLevelGroupId.HasValue ?
                new ObjectParameter("StudyLevelGroupId", studyLevelGroupId) :
                new ObjectParameter("StudyLevelGroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var obrazProgramIdParameter = obrazProgramId.HasValue ?
                new ObjectParameter("ObrazProgramId", obrazProgramId) :
                new ObjectParameter("ObrazProgramId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var isReducedParameter = isReduced.HasValue ?
                new ObjectParameter("IsReduced", isReduced) :
                new ObjectParameter("IsReduced", typeof(bool));
    
            var isParallelParameter = isParallel.HasValue ?
                new ObjectParameter("IsParallel", isParallel) :
                new ObjectParameter("IsParallel", typeof(bool));
    
            var isCelParameter = isCel.HasValue ?
                new ObjectParameter("IsCel", isCel) :
                new ObjectParameter("IsCel", typeof(bool));
    
            var docNumParameter = docNum.HasValue ?
                new ObjectParameter("DocNum", docNum) :
                new ObjectParameter("DocNum", typeof(int));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            var isQuotaParameter = isQuota.HasValue ?
                new ObjectParameter("IsQuota", isQuota) :
                new ObjectParameter("IsQuota", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixierenView_Insert", studyLevelGroupIdParameter, facultyIdParameter, licenseProgramIdParameter, obrazProgramIdParameter, profileIdParameter, studyBasisIdParameter, studyFormIdParameter, isSecondParameter, isReducedParameter, isParallelParameter, isCelParameter, docNumParameter, lockedParameter, isCrimeaParameter, isQuotaParameter, id);
        }
    
        public virtual int FixierenView_UpdateLocked(Nullable<int> studyLevelGroupId, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> obrazProgramId, Nullable<int> profileId, Nullable<int> studyBasisId, Nullable<int> studyFormId, Nullable<bool> isSecond, Nullable<bool> isReduced, Nullable<bool> isParallel, Nullable<bool> isCel, Nullable<bool> isCrimea, Nullable<bool> locked)
        {
            var studyLevelGroupIdParameter = studyLevelGroupId.HasValue ?
                new ObjectParameter("StudyLevelGroupId", studyLevelGroupId) :
                new ObjectParameter("StudyLevelGroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var obrazProgramIdParameter = obrazProgramId.HasValue ?
                new ObjectParameter("ObrazProgramId", obrazProgramId) :
                new ObjectParameter("ObrazProgramId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var isReducedParameter = isReduced.HasValue ?
                new ObjectParameter("IsReduced", isReduced) :
                new ObjectParameter("IsReduced", typeof(bool));
    
            var isParallelParameter = isParallel.HasValue ?
                new ObjectParameter("IsParallel", isParallel) :
                new ObjectParameter("IsParallel", typeof(bool));
    
            var isCelParameter = isCel.HasValue ?
                new ObjectParameter("IsCel", isCel) :
                new ObjectParameter("IsCel", typeof(bool));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixierenView_UpdateLocked", studyLevelGroupIdParameter, facultyIdParameter, licenseProgramIdParameter, obrazProgramIdParameter, profileIdParameter, studyBasisIdParameter, studyFormIdParameter, isSecondParameter, isReducedParameter, isParallelParameter, isCelParameter, isCrimeaParameter, lockedParameter);
        }
    
        public virtual int FirstWave_DELETE(Nullable<System.Guid> entryId, Nullable<bool> isCel, Nullable<bool> isCrimea, Nullable<bool> isQuota)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var isCelParameter = isCel.HasValue ?
                new ObjectParameter("IsCel", isCel) :
                new ObjectParameter("IsCel", typeof(bool));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            var isQuotaParameter = isQuota.HasValue ?
                new ObjectParameter("IsQuota", isQuota) :
                new ObjectParameter("IsQuota", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_DELETE", entryIdParameter, isCelParameter, isCrimeaParameter, isQuotaParameter);
        }
    
        public virtual int FirstWave_INSERT(Nullable<System.Guid> abiturientId, Nullable<int> sortNum)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var sortNumParameter = sortNum.HasValue ?
                new ObjectParameter("SortNum", sortNum) :
                new ObjectParameter("SortNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_INSERT", abiturientIdParameter, sortNumParameter);
        }
    
        public virtual int Fixieren_DELETE(Nullable<System.Guid> abiturientId)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fixieren_DELETE", abiturientIdParameter);
        }
    
        public virtual int FirstWave_DeleteByAbId(Nullable<System.Guid> abiturientid)
        {
            var abiturientidParameter = abiturientid.HasValue ?
                new ObjectParameter("Abiturientid", abiturientid) :
                new ObjectParameter("Abiturientid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_DeleteByAbId", abiturientidParameter);
        }
    
        public virtual int FirstWaveGreen_INSERT(Nullable<System.Guid> abiturientId, Nullable<bool> isNew)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWaveGreen_INSERT", abiturientIdParameter, isNewParameter);
        }
    
        public virtual int FirstWaveGreen_DeleteByAbId(Nullable<System.Guid> abiturientid)
        {
            var abiturientidParameter = abiturientid.HasValue ?
                new ObjectParameter("Abiturientid", abiturientid) :
                new ObjectParameter("Abiturientid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWaveGreen_DeleteByAbId", abiturientidParameter);
        }
    
        public virtual int Protocol_InsertAll(Nullable<int> studyLevelGroupId, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> studyFormId, Nullable<int> studyBasisId, string number, Nullable<System.DateTime> date, Nullable<int> protocolTypeId, string reason, Nullable<bool> isOld, Nullable<System.Guid> parentProtocolId, Nullable<bool> isSecond, Nullable<bool> isReduced, Nullable<bool> isParallel, Nullable<bool> isListener, Nullable<bool> isForeign, ObjectParameter id)
        {
            var studyLevelGroupIdParameter = studyLevelGroupId.HasValue ?
                new ObjectParameter("StudyLevelGroupId", studyLevelGroupId) :
                new ObjectParameter("StudyLevelGroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var protocolTypeIdParameter = protocolTypeId.HasValue ?
                new ObjectParameter("ProtocolTypeId", protocolTypeId) :
                new ObjectParameter("ProtocolTypeId", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var isOldParameter = isOld.HasValue ?
                new ObjectParameter("IsOld", isOld) :
                new ObjectParameter("IsOld", typeof(bool));
    
            var parentProtocolIdParameter = parentProtocolId.HasValue ?
                new ObjectParameter("ParentProtocolId", parentProtocolId) :
                new ObjectParameter("ParentProtocolId", typeof(System.Guid));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var isReducedParameter = isReduced.HasValue ?
                new ObjectParameter("IsReduced", isReduced) :
                new ObjectParameter("IsReduced", typeof(bool));
    
            var isParallelParameter = isParallel.HasValue ?
                new ObjectParameter("IsParallel", isParallel) :
                new ObjectParameter("IsParallel", typeof(bool));
    
            var isListenerParameter = isListener.HasValue ?
                new ObjectParameter("IsListener", isListener) :
                new ObjectParameter("IsListener", typeof(bool));
    
            var isForeignParameter = isForeign.HasValue ?
                new ObjectParameter("IsForeign", isForeign) :
                new ObjectParameter("IsForeign", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Protocol_InsertAll", studyLevelGroupIdParameter, facultyIdParameter, licenseProgramIdParameter, studyFormIdParameter, studyBasisIdParameter, numberParameter, dateParameter, protocolTypeIdParameter, reasonParameter, isOldParameter, parentProtocolIdParameter, isSecondParameter, isReducedParameter, isParallelParameter, isListenerParameter, isForeignParameter, id);
        }
    
        public virtual int Abiturient_UpdateBackDocByDisEntry(Nullable<bool> backDoc, Nullable<System.DateTime> backDocDate, Nullable<System.Guid> disentryviewId)
        {
            var backDocParameter = backDoc.HasValue ?
                new ObjectParameter("BackDoc", backDoc) :
                new ObjectParameter("BackDoc", typeof(bool));
    
            var backDocDateParameter = backDocDate.HasValue ?
                new ObjectParameter("BackDocDate", backDocDate) :
                new ObjectParameter("BackDocDate", typeof(System.DateTime));
    
            var disentryviewIdParameter = disentryviewId.HasValue ?
                new ObjectParameter("disentryviewId", disentryviewId) :
                new ObjectParameter("disentryviewId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateBackDocByDisEntry", backDocParameter, backDocDateParameter, disentryviewIdParameter);
        }
    
        public virtual int EntryView_UpdateDisEntry(Nullable<System.Guid> disentryviewId)
        {
            var disentryviewIdParameter = disentryviewId.HasValue ?
                new ObjectParameter("disentryviewId", disentryviewId) :
                new ObjectParameter("disentryviewId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EntryView_UpdateDisEntry", disentryviewIdParameter);
        }
    
        public virtual int OrderNumbers_Insert(Nullable<System.Guid> protocolId, Nullable<System.DateTime> orderdate, string ordernum, Nullable<System.DateTime> orderdateFor, string ordernumFor, Nullable<int> signerId, Nullable<System.DateTime> comissionDate, string comissionNumber)
        {
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("protocolId", protocolId) :
                new ObjectParameter("protocolId", typeof(System.Guid));
    
            var orderdateParameter = orderdate.HasValue ?
                new ObjectParameter("orderdate", orderdate) :
                new ObjectParameter("orderdate", typeof(System.DateTime));
    
            var ordernumParameter = ordernum != null ?
                new ObjectParameter("ordernum", ordernum) :
                new ObjectParameter("ordernum", typeof(string));
    
            var orderdateForParameter = orderdateFor.HasValue ?
                new ObjectParameter("orderdateFor", orderdateFor) :
                new ObjectParameter("orderdateFor", typeof(System.DateTime));
    
            var ordernumForParameter = ordernumFor != null ?
                new ObjectParameter("ordernumFor", ordernumFor) :
                new ObjectParameter("ordernumFor", typeof(string));
    
            var signerIdParameter = signerId.HasValue ?
                new ObjectParameter("SignerId", signerId) :
                new ObjectParameter("SignerId", typeof(int));
    
            var comissionDateParameter = comissionDate.HasValue ?
                new ObjectParameter("ComissionDate", comissionDate) :
                new ObjectParameter("ComissionDate", typeof(System.DateTime));
    
            var comissionNumberParameter = comissionNumber != null ?
                new ObjectParameter("ComissionNumber", comissionNumber) :
                new ObjectParameter("ComissionNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderNumbers_Insert", protocolIdParameter, orderdateParameter, ordernumParameter, orderdateForParameter, ordernumForParameter, signerIdParameter, comissionDateParameter, comissionNumberParameter);
        }
    
        public virtual int OrderNumbers_Update(Nullable<System.Guid> protocolId, Nullable<System.DateTime> orderdate, string ordernum, Nullable<System.DateTime> orderdateFor, string ordernumFor, Nullable<int> signerId, Nullable<System.DateTime> comissionDate, string comissionNumber)
        {
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("protocolId", protocolId) :
                new ObjectParameter("protocolId", typeof(System.Guid));
    
            var orderdateParameter = orderdate.HasValue ?
                new ObjectParameter("orderdate", orderdate) :
                new ObjectParameter("orderdate", typeof(System.DateTime));
    
            var ordernumParameter = ordernum != null ?
                new ObjectParameter("ordernum", ordernum) :
                new ObjectParameter("ordernum", typeof(string));
    
            var orderdateForParameter = orderdateFor.HasValue ?
                new ObjectParameter("orderdateFor", orderdateFor) :
                new ObjectParameter("orderdateFor", typeof(System.DateTime));
    
            var ordernumForParameter = ordernumFor != null ?
                new ObjectParameter("ordernumFor", ordernumFor) :
                new ObjectParameter("ordernumFor", typeof(string));
    
            var signerIdParameter = signerId.HasValue ?
                new ObjectParameter("SignerId", signerId) :
                new ObjectParameter("SignerId", typeof(int));
    
            var comissionDateParameter = comissionDate.HasValue ?
                new ObjectParameter("ComissionDate", comissionDate) :
                new ObjectParameter("ComissionDate", typeof(System.DateTime));
    
            var comissionNumberParameter = comissionNumber != null ?
                new ObjectParameter("ComissionNumber", comissionNumber) :
                new ObjectParameter("ComissionNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderNumbers_Update", protocolIdParameter, orderdateParameter, ordernumParameter, orderdateForParameter, ordernumForParameter, signerIdParameter, comissionDateParameter, comissionNumberParameter);
        }
    
        public virtual int FixierenViewBackup2_Insert(Nullable<System.Guid> id, Nullable<int> studyLevelGroupId, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> obrazProgramId, Nullable<int> profileId, Nullable<int> studyBasisId, Nullable<int> studyFormId, Nullable<bool> isSecond, Nullable<bool> isReduced, Nullable<bool> isParallel, Nullable<bool> isCel, Nullable<int> docNum, Nullable<bool> locked)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            var studyLevelGroupIdParameter = studyLevelGroupId.HasValue ?
                new ObjectParameter("StudyLevelGroupId", studyLevelGroupId) :
                new ObjectParameter("StudyLevelGroupId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var obrazProgramIdParameter = obrazProgramId.HasValue ?
                new ObjectParameter("ObrazProgramId", obrazProgramId) :
                new ObjectParameter("ObrazProgramId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var isReducedParameter = isReduced.HasValue ?
                new ObjectParameter("IsReduced", isReduced) :
                new ObjectParameter("IsReduced", typeof(bool));
    
            var isParallelParameter = isParallel.HasValue ?
                new ObjectParameter("IsParallel", isParallel) :
                new ObjectParameter("IsParallel", typeof(bool));
    
            var isCelParameter = isCel.HasValue ?
                new ObjectParameter("IsCel", isCel) :
                new ObjectParameter("IsCel", typeof(bool));
    
            var docNumParameter = docNum.HasValue ?
                new ObjectParameter("DocNum", docNum) :
                new ObjectParameter("DocNum", typeof(int));
    
            var lockedParameter = locked.HasValue ?
                new ObjectParameter("Locked", locked) :
                new ObjectParameter("Locked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixierenViewBackup2_Insert", idParameter, studyLevelGroupIdParameter, facultyIdParameter, licenseProgramIdParameter, obrazProgramIdParameter, profileIdParameter, studyBasisIdParameter, studyFormIdParameter, isSecondParameter, isReducedParameter, isParallelParameter, isCelParameter, docNumParameter, lockedParameter);
        }
    
        public virtual int FirstWave_DELETE_DogEntryBack()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_DELETE_DogEntryBack");
        }
    
        public virtual int Abiturient_UpdateStudyNumber(string studyNumber, Nullable<System.Guid> id)
        {
            var studyNumberParameter = studyNumber != null ?
                new ObjectParameter("StudyNumber", studyNumber) :
                new ObjectParameter("StudyNumber", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateStudyNumber", studyNumberParameter, idParameter);
        }
    
        public virtual int Abiturient_UpdateSN(string studyNumber, Nullable<System.Guid> id)
        {
            var studyNumberParameter = studyNumber != null ?
                new ObjectParameter("StudyNumber", studyNumber) :
                new ObjectParameter("StudyNumber", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateSN", studyNumberParameter, idParameter);
        }
    
        public virtual int PersonBenefitDocument_delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonBenefitDocument_delete", idParameter);
        }
    
        public virtual int PersonBenefitDocument_insert(Nullable<System.Guid> personId, Nullable<int> benefitDocumentTypeId, string series, string number, Nullable<System.DateTime> date, string author, Nullable<bool> hasOriginals, Nullable<int> disabilityTypeId, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var benefitDocumentTypeIdParameter = benefitDocumentTypeId.HasValue ?
                new ObjectParameter("BenefitDocumentTypeId", benefitDocumentTypeId) :
                new ObjectParameter("BenefitDocumentTypeId", typeof(int));
    
            var seriesParameter = series != null ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var hasOriginalsParameter = hasOriginals.HasValue ?
                new ObjectParameter("HasOriginals", hasOriginals) :
                new ObjectParameter("HasOriginals", typeof(bool));
    
            var disabilityTypeIdParameter = disabilityTypeId.HasValue ?
                new ObjectParameter("DisabilityTypeId", disabilityTypeId) :
                new ObjectParameter("DisabilityTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonBenefitDocument_insert", personIdParameter, benefitDocumentTypeIdParameter, seriesParameter, numberParameter, dateParameter, authorParameter, hasOriginalsParameter, disabilityTypeIdParameter, id);
        }
    
        public virtual int PersonBenefitDocument_update(Nullable<int> benefitDocumentTypeId, string series, string number, Nullable<System.DateTime> date, string author, Nullable<bool> hasOriginals, Nullable<int> disabilityTypeId, Nullable<System.Guid> id)
        {
            var benefitDocumentTypeIdParameter = benefitDocumentTypeId.HasValue ?
                new ObjectParameter("BenefitDocumentTypeId", benefitDocumentTypeId) :
                new ObjectParameter("BenefitDocumentTypeId", typeof(int));
    
            var seriesParameter = series != null ?
                new ObjectParameter("Series", series) :
                new ObjectParameter("Series", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var hasOriginalsParameter = hasOriginals.HasValue ?
                new ObjectParameter("HasOriginals", hasOriginals) :
                new ObjectParameter("HasOriginals", typeof(bool));
    
            var disabilityTypeIdParameter = disabilityTypeId.HasValue ?
                new ObjectParameter("DisabilityTypeId", disabilityTypeId) :
                new ObjectParameter("DisabilityTypeId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonBenefitDocument_update", benefitDocumentTypeIdParameter, seriesParameter, numberParameter, dateParameter, authorParameter, hasOriginalsParameter, disabilityTypeIdParameter, idParameter);
        }
    
        public virtual int OlympiadCheckedByRectorat_Insert(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympiadCheckedByRectorat_Insert", idParameter);
        }
    
        public virtual int FirstWave_INSERTCEL(Nullable<System.Guid> abiturientId, Nullable<int> sortNum)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var sortNumParameter = sortNum.HasValue ?
                new ObjectParameter("SortNum", sortNum) :
                new ObjectParameter("SortNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_INSERTCEL", abiturientIdParameter, sortNumParameter);
        }
    
        public virtual int PayDataEntry_Insert(Nullable<System.Guid> entryId, string univerName, string univerAddress, string univerINN, string univerRS, string univerDop, Nullable<int> prorektorId, string qualification, string educPeriod, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateFinish, string props)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var univerNameParameter = univerName != null ?
                new ObjectParameter("UniverName", univerName) :
                new ObjectParameter("UniverName", typeof(string));
    
            var univerAddressParameter = univerAddress != null ?
                new ObjectParameter("UniverAddress", univerAddress) :
                new ObjectParameter("UniverAddress", typeof(string));
    
            var univerINNParameter = univerINN != null ?
                new ObjectParameter("UniverINN", univerINN) :
                new ObjectParameter("UniverINN", typeof(string));
    
            var univerRSParameter = univerRS != null ?
                new ObjectParameter("UniverRS", univerRS) :
                new ObjectParameter("UniverRS", typeof(string));
    
            var univerDopParameter = univerDop != null ?
                new ObjectParameter("UniverDop", univerDop) :
                new ObjectParameter("UniverDop", typeof(string));
    
            var prorektorIdParameter = prorektorId.HasValue ?
                new ObjectParameter("ProrektorId", prorektorId) :
                new ObjectParameter("ProrektorId", typeof(int));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var educPeriodParameter = educPeriod != null ?
                new ObjectParameter("EducPeriod", educPeriod) :
                new ObjectParameter("EducPeriod", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateFinishParameter = dateFinish.HasValue ?
                new ObjectParameter("DateFinish", dateFinish) :
                new ObjectParameter("DateFinish", typeof(System.DateTime));
    
            var propsParameter = props != null ?
                new ObjectParameter("Props", props) :
                new ObjectParameter("Props", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayDataEntry_Insert", entryIdParameter, univerNameParameter, univerAddressParameter, univerINNParameter, univerRSParameter, univerDopParameter, prorektorIdParameter, qualificationParameter, educPeriodParameter, dateStartParameter, dateFinishParameter, propsParameter);
        }
    
        public virtual int PayDataEntry_Update(Nullable<System.Guid> entryId, string univerName, string univerAddress, string univerINN, string univerRS, string univerDop, Nullable<int> prorektorId, string qualification, string educPeriod, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateFinish, string props)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var univerNameParameter = univerName != null ?
                new ObjectParameter("UniverName", univerName) :
                new ObjectParameter("UniverName", typeof(string));
    
            var univerAddressParameter = univerAddress != null ?
                new ObjectParameter("UniverAddress", univerAddress) :
                new ObjectParameter("UniverAddress", typeof(string));
    
            var univerINNParameter = univerINN != null ?
                new ObjectParameter("UniverINN", univerINN) :
                new ObjectParameter("UniverINN", typeof(string));
    
            var univerRSParameter = univerRS != null ?
                new ObjectParameter("UniverRS", univerRS) :
                new ObjectParameter("UniverRS", typeof(string));
    
            var univerDopParameter = univerDop != null ?
                new ObjectParameter("UniverDop", univerDop) :
                new ObjectParameter("UniverDop", typeof(string));
    
            var prorektorIdParameter = prorektorId.HasValue ?
                new ObjectParameter("ProrektorId", prorektorId) :
                new ObjectParameter("ProrektorId", typeof(int));
    
            var qualificationParameter = qualification != null ?
                new ObjectParameter("Qualification", qualification) :
                new ObjectParameter("Qualification", typeof(string));
    
            var educPeriodParameter = educPeriod != null ?
                new ObjectParameter("EducPeriod", educPeriod) :
                new ObjectParameter("EducPeriod", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateFinishParameter = dateFinish.HasValue ?
                new ObjectParameter("DateFinish", dateFinish) :
                new ObjectParameter("DateFinish", typeof(System.DateTime));
    
            var propsParameter = props != null ?
                new ObjectParameter("Props", props) :
                new ObjectParameter("Props", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayDataEntry_Update", entryIdParameter, univerNameParameter, univerAddressParameter, univerINNParameter, univerRSParameter, univerDopParameter, prorektorIdParameter, qualificationParameter, educPeriodParameter, dateStartParameter, dateFinishParameter, propsParameter);
        }
    
        public virtual int EntryToCompetitiveGroup_Delete(Nullable<System.Guid> entryId, Nullable<System.Guid> competitiveGroupId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var competitiveGroupIdParameter = competitiveGroupId.HasValue ?
                new ObjectParameter("CompetitiveGroupId", competitiveGroupId) :
                new ObjectParameter("CompetitiveGroupId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EntryToCompetitiveGroup_Delete", entryIdParameter, competitiveGroupIdParameter);
        }
    
        public virtual int EntryToCompetitiveGroup_Insert(Nullable<System.Guid> entryId, Nullable<System.Guid> competitiveGroupId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var competitiveGroupIdParameter = competitiveGroupId.HasValue ?
                new ObjectParameter("CompetitiveGroupId", competitiveGroupId) :
                new ObjectParameter("CompetitiveGroupId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EntryToCompetitiveGroup_Insert", entryIdParameter, competitiveGroupIdParameter);
        }
    
        public virtual int CompetitiveGroup_delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompetitiveGroup_delete", idParameter);
        }
    
        public virtual int CompetitiveGroup_Insert(string name, Nullable<int> kCP, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var kCPParameter = kCP.HasValue ?
                new ObjectParameter("KCP", kCP) :
                new ObjectParameter("KCP", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompetitiveGroup_Insert", nameParameter, kCPParameter, id);
        }
    
        public virtual int CompetitiveGroup_update(string name, Nullable<int> kCP, Nullable<System.Guid> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var kCPParameter = kCP.HasValue ?
                new ObjectParameter("KCP", kCP) :
                new ObjectParameter("KCP", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompetitiveGroup_update", nameParameter, kCPParameter, idParameter);
        }
    
        public virtual int SchoolNames_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SchoolNames_Delete", idParameter);
        }
    
        public virtual int SchoolNames_Insert(Nullable<int> regionId, Nullable<int> schoolTypeId, string name, ObjectParameter id)
        {
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var schoolTypeIdParameter = schoolTypeId.HasValue ?
                new ObjectParameter("SchoolTypeId", schoolTypeId) :
                new ObjectParameter("SchoolTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SchoolNames_Insert", regionIdParameter, schoolTypeIdParameter, nameParameter, id);
        }
    
        public virtual int SchoolNames_Update(Nullable<int> regionId, Nullable<int> schoolTypeId, string name, Nullable<int> id)
        {
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            var schoolTypeIdParameter = schoolTypeId.HasValue ?
                new ObjectParameter("SchoolTypeId", schoolTypeId) :
                new ObjectParameter("SchoolTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SchoolNames_Update", regionIdParameter, schoolTypeIdParameter, nameParameter, idParameter);
        }
    
        public virtual int SetApplicationValue(string paramKey, string paramValue)
        {
            var paramKeyParameter = paramKey != null ?
                new ObjectParameter("ParamKey", paramKey) :
                new ObjectParameter("ParamKey", typeof(string));
    
            var paramValueParameter = paramValue != null ?
                new ObjectParameter("ParamValue", paramValue) :
                new ObjectParameter("ParamValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetApplicationValue", paramKeyParameter, paramValueParameter);
        }
    
        public virtual int OlympName_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympName_Delete", idParameter);
        }
    
        public virtual int OlympSubject_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympSubject_Delete", idParameter);
        }
    
        public virtual int Entry_Update(Nullable<System.Guid> id, Nullable<int> studyLevelId, Nullable<int> studyFormId, Nullable<int> studyBasisId, Nullable<int> facultyId, Nullable<bool> isClosed, Nullable<bool> isParallel, Nullable<bool> isReduced, Nullable<bool> isSecond, string studyPlanNumber, Nullable<System.DateTime> dateOfStart, Nullable<System.DateTime> dateOfClose, Nullable<int> comissionId, Nullable<bool> isForeign, Nullable<bool> isCrimea)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var studyLevelIdParameter = studyLevelId.HasValue ?
                new ObjectParameter("StudyLevelId", studyLevelId) :
                new ObjectParameter("StudyLevelId", typeof(int));
    
            var studyFormIdParameter = studyFormId.HasValue ?
                new ObjectParameter("StudyFormId", studyFormId) :
                new ObjectParameter("StudyFormId", typeof(int));
    
            var studyBasisIdParameter = studyBasisId.HasValue ?
                new ObjectParameter("StudyBasisId", studyBasisId) :
                new ObjectParameter("StudyBasisId", typeof(int));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var isClosedParameter = isClosed.HasValue ?
                new ObjectParameter("IsClosed", isClosed) :
                new ObjectParameter("IsClosed", typeof(bool));
    
            var isParallelParameter = isParallel.HasValue ?
                new ObjectParameter("IsParallel", isParallel) :
                new ObjectParameter("IsParallel", typeof(bool));
    
            var isReducedParameter = isReduced.HasValue ?
                new ObjectParameter("IsReduced", isReduced) :
                new ObjectParameter("IsReduced", typeof(bool));
    
            var isSecondParameter = isSecond.HasValue ?
                new ObjectParameter("IsSecond", isSecond) :
                new ObjectParameter("IsSecond", typeof(bool));
    
            var studyPlanNumberParameter = studyPlanNumber != null ?
                new ObjectParameter("StudyPlanNumber", studyPlanNumber) :
                new ObjectParameter("StudyPlanNumber", typeof(string));
    
            var dateOfStartParameter = dateOfStart.HasValue ?
                new ObjectParameter("DateOfStart", dateOfStart) :
                new ObjectParameter("DateOfStart", typeof(System.DateTime));
    
            var dateOfCloseParameter = dateOfClose.HasValue ?
                new ObjectParameter("DateOfClose", dateOfClose) :
                new ObjectParameter("DateOfClose", typeof(System.DateTime));
    
            var comissionIdParameter = comissionId.HasValue ?
                new ObjectParameter("ComissionId", comissionId) :
                new ObjectParameter("ComissionId", typeof(int));
    
            var isForeignParameter = isForeign.HasValue ?
                new ObjectParameter("IsForeign", isForeign) :
                new ObjectParameter("IsForeign", typeof(bool));
    
            var isCrimeaParameter = isCrimea.HasValue ?
                new ObjectParameter("IsCrimea", isCrimea) :
                new ObjectParameter("IsCrimea", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Entry_Update", idParameter, studyLevelIdParameter, studyFormIdParameter, studyBasisIdParameter, facultyIdParameter, isClosedParameter, isParallelParameter, isReducedParameter, isSecondParameter, studyPlanNumberParameter, dateOfStartParameter, dateOfCloseParameter, comissionIdParameter, isForeignParameter, isCrimeaParameter);
        }
    
        public virtual int SP_LicenseProgram_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LicenseProgram_Delete", idParameter);
        }
    
        public virtual int SP_LicenseProgram_Insert(string name, string nameEng, string code, Nullable<int> studyLevelId, Nullable<int> aggregateGroupId, string gSGUCode, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameEngParameter = nameEng != null ?
                new ObjectParameter("NameEng", nameEng) :
                new ObjectParameter("NameEng", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var studyLevelIdParameter = studyLevelId.HasValue ?
                new ObjectParameter("StudyLevelId", studyLevelId) :
                new ObjectParameter("StudyLevelId", typeof(int));
    
            var aggregateGroupIdParameter = aggregateGroupId.HasValue ?
                new ObjectParameter("AggregateGroupId", aggregateGroupId) :
                new ObjectParameter("AggregateGroupId", typeof(int));
    
            var gSGUCodeParameter = gSGUCode != null ?
                new ObjectParameter("GSGUCode", gSGUCode) :
                new ObjectParameter("GSGUCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LicenseProgram_Insert", nameParameter, nameEngParameter, codeParameter, studyLevelIdParameter, aggregateGroupIdParameter, gSGUCodeParameter, id);
        }
    
        public virtual int SP_LicenseProgram_Update(string name, string nameEng, string code, Nullable<int> studyLevelId, Nullable<int> aggregateGroupId, string gSGUCode, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameEngParameter = nameEng != null ?
                new ObjectParameter("NameEng", nameEng) :
                new ObjectParameter("NameEng", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var studyLevelIdParameter = studyLevelId.HasValue ?
                new ObjectParameter("StudyLevelId", studyLevelId) :
                new ObjectParameter("StudyLevelId", typeof(int));
    
            var aggregateGroupIdParameter = aggregateGroupId.HasValue ?
                new ObjectParameter("AggregateGroupId", aggregateGroupId) :
                new ObjectParameter("AggregateGroupId", typeof(int));
    
            var gSGUCodeParameter = gSGUCode != null ?
                new ObjectParameter("GSGUCode", gSGUCode) :
                new ObjectParameter("GSGUCode", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LicenseProgram_Update", nameParameter, nameEngParameter, codeParameter, studyLevelIdParameter, aggregateGroupIdParameter, gSGUCodeParameter, idParameter);
        }
    
        public virtual int SP_ObrazProgram_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ObrazProgram_Delete", idParameter);
        }
    
        public virtual int SP_ObrazProgram_Insert(string name, string nameEng, string number, Nullable<int> facultyId, Nullable<int> licenseProgramId, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameEngParameter = nameEng != null ?
                new ObjectParameter("NameEng", nameEng) :
                new ObjectParameter("NameEng", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ObrazProgram_Insert", nameParameter, nameEngParameter, numberParameter, facultyIdParameter, licenseProgramIdParameter, id);
        }
    
        public virtual int SP_ObrazProgram_Update(string name, string nameEng, string number, Nullable<int> facultyId, Nullable<int> licenseProgramId, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameEngParameter = nameEng != null ?
                new ObjectParameter("NameEng", nameEng) :
                new ObjectParameter("NameEng", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var facultyIdParameter = facultyId.HasValue ?
                new ObjectParameter("FacultyId", facultyId) :
                new ObjectParameter("FacultyId", typeof(int));
    
            var licenseProgramIdParameter = licenseProgramId.HasValue ?
                new ObjectParameter("LicenseProgramId", licenseProgramId) :
                new ObjectParameter("LicenseProgramId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ObrazProgram_Update", nameParameter, nameEngParameter, numberParameter, facultyIdParameter, licenseProgramIdParameter, idParameter);
        }
    
        public virtual int OlympBook_Update(Nullable<int> olympTypeId, Nullable<int> olympNameId, Nullable<int> olympSubjectId, Nullable<int> olympLevelId, Nullable<int> olympYear, Nullable<System.Guid> id)
        {
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympNameIdParameter = olympNameId.HasValue ?
                new ObjectParameter("OlympNameId", olympNameId) :
                new ObjectParameter("OlympNameId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympYearParameter = olympYear.HasValue ?
                new ObjectParameter("OlympYear", olympYear) :
                new ObjectParameter("OlympYear", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympBook_Update", olympTypeIdParameter, olympNameIdParameter, olympSubjectIdParameter, olympLevelIdParameter, olympYearParameter, idParameter);
        }
    
        public virtual int OlympName_Update(string olympName, Nullable<int> olympNumber, Nullable<int> id)
        {
            var olympNameParameter = olympName != null ?
                new ObjectParameter("OlympName", olympName) :
                new ObjectParameter("OlympName", typeof(string));
    
            var olympNumberParameter = olympNumber.HasValue ?
                new ObjectParameter("OlympNumber", olympNumber) :
                new ObjectParameter("OlympNumber", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympName_Update", olympNameParameter, olympNumberParameter, idParameter);
        }
    
        public virtual int OlympSubject_Update(string olympSubjName, string nameDative, Nullable<int> id)
        {
            var olympSubjNameParameter = olympSubjName != null ?
                new ObjectParameter("OlympSubjName", olympSubjName) :
                new ObjectParameter("OlympSubjName", typeof(string));
    
            var nameDativeParameter = nameDative != null ?
                new ObjectParameter("NameDative", nameDative) :
                new ObjectParameter("NameDative", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympSubject_Update", olympSubjNameParameter, nameDativeParameter, idParameter);
        }
    
        public virtual int Abiturient_InsertDirectly(Nullable<System.Guid> personId, Nullable<System.Guid> entryId, Nullable<int> competitionId, Nullable<bool> isListener, Nullable<bool> withHE, Nullable<bool> isPaid, Nullable<bool> backDoc, Nullable<System.DateTime> backDocDate, Nullable<System.DateTime> docDate, Nullable<System.DateTime> docInsertDate, Nullable<bool> @checked, Nullable<bool> notEnabled, Nullable<double> coefficient, Nullable<int> otherCompetitionId, Nullable<int> celCompetitionId, string celCompetitionText, Nullable<int> languageId, Nullable<bool> hasOriginals, Nullable<double> priority, Nullable<int> barcode, Nullable<System.Guid> commitId, Nullable<int> commitNumber, Nullable<bool> isViewed, Nullable<System.Guid> id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var competitionIdParameter = competitionId.HasValue ?
                new ObjectParameter("CompetitionId", competitionId) :
                new ObjectParameter("CompetitionId", typeof(int));
    
            var isListenerParameter = isListener.HasValue ?
                new ObjectParameter("IsListener", isListener) :
                new ObjectParameter("IsListener", typeof(bool));
    
            var withHEParameter = withHE.HasValue ?
                new ObjectParameter("WithHE", withHE) :
                new ObjectParameter("WithHE", typeof(bool));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var backDocParameter = backDoc.HasValue ?
                new ObjectParameter("BackDoc", backDoc) :
                new ObjectParameter("BackDoc", typeof(bool));
    
            var backDocDateParameter = backDocDate.HasValue ?
                new ObjectParameter("BackDocDate", backDocDate) :
                new ObjectParameter("BackDocDate", typeof(System.DateTime));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var docInsertDateParameter = docInsertDate.HasValue ?
                new ObjectParameter("DocInsertDate", docInsertDate) :
                new ObjectParameter("DocInsertDate", typeof(System.DateTime));
    
            var checkedParameter = @checked.HasValue ?
                new ObjectParameter("Checked", @checked) :
                new ObjectParameter("Checked", typeof(bool));
    
            var notEnabledParameter = notEnabled.HasValue ?
                new ObjectParameter("NotEnabled", notEnabled) :
                new ObjectParameter("NotEnabled", typeof(bool));
    
            var coefficientParameter = coefficient.HasValue ?
                new ObjectParameter("Coefficient", coefficient) :
                new ObjectParameter("Coefficient", typeof(double));
    
            var otherCompetitionIdParameter = otherCompetitionId.HasValue ?
                new ObjectParameter("OtherCompetitionId", otherCompetitionId) :
                new ObjectParameter("OtherCompetitionId", typeof(int));
    
            var celCompetitionIdParameter = celCompetitionId.HasValue ?
                new ObjectParameter("CelCompetitionId", celCompetitionId) :
                new ObjectParameter("CelCompetitionId", typeof(int));
    
            var celCompetitionTextParameter = celCompetitionText != null ?
                new ObjectParameter("CelCompetitionText", celCompetitionText) :
                new ObjectParameter("CelCompetitionText", typeof(string));
    
            var languageIdParameter = languageId.HasValue ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(int));
    
            var hasOriginalsParameter = hasOriginals.HasValue ?
                new ObjectParameter("HasOriginals", hasOriginals) :
                new ObjectParameter("HasOriginals", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(double));
    
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(int));
    
            var commitIdParameter = commitId.HasValue ?
                new ObjectParameter("CommitId", commitId) :
                new ObjectParameter("CommitId", typeof(System.Guid));
    
            var commitNumberParameter = commitNumber.HasValue ?
                new ObjectParameter("CommitNumber", commitNumber) :
                new ObjectParameter("CommitNumber", typeof(int));
    
            var isViewedParameter = isViewed.HasValue ?
                new ObjectParameter("IsViewed", isViewed) :
                new ObjectParameter("IsViewed", typeof(bool));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_InsertDirectly", personIdParameter, entryIdParameter, competitionIdParameter, isListenerParameter, withHEParameter, isPaidParameter, backDocParameter, backDocDateParameter, docDateParameter, docInsertDateParameter, checkedParameter, notEnabledParameter, coefficientParameter, otherCompetitionIdParameter, celCompetitionIdParameter, celCompetitionTextParameter, languageIdParameter, hasOriginalsParameter, priorityParameter, barcodeParameter, commitIdParameter, commitNumberParameter, isViewedParameter, idParameter);
        }
    
        public virtual int Abiturient_UpdateIsViewed(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateIsViewed", idParameter);
        }
    
        public virtual int CheckAbitIdentWithGosLine(Nullable<System.Guid> personId, Nullable<System.Guid> entryId, Nullable<bool> isGosLine, ObjectParameter result)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var isGosLineParameter = isGosLine.HasValue ?
                new ObjectParameter("IsGosLine", isGosLine) :
                new ObjectParameter("IsGosLine", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckAbitIdentWithGosLine", personIdParameter, entryIdParameter, isGosLineParameter, result);
        }
    
        public virtual int CheckAbitIdentWithIdAndGosLine(Nullable<System.Guid> abitId, Nullable<System.Guid> personId, Nullable<System.Guid> entryId, Nullable<bool> isGosLine, ObjectParameter result)
        {
            var abitIdParameter = abitId.HasValue ?
                new ObjectParameter("AbitId", abitId) :
                new ObjectParameter("AbitId", typeof(System.Guid));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var isGosLineParameter = isGosLine.HasValue ?
                new ObjectParameter("IsGosLine", isGosLine) :
                new ObjectParameter("IsGosLine", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckAbitIdentWithIdAndGosLine", abitIdParameter, personIdParameter, entryIdParameter, isGosLineParameter, result);
        }
    
        public virtual int ExamsVed_SetExaminerAccount(string examinerAccount, Nullable<System.Guid> id)
        {
            var examinerAccountParameter = examinerAccount != null ?
                new ObjectParameter("ExaminerAccount", examinerAccount) :
                new ObjectParameter("ExaminerAccount", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_SetExaminerAccount", examinerAccountParameter, idParameter);
        }
    
        public virtual int ExamsVed_DeleteAllExaminerAccountInVed(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExamsVed_DeleteAllExaminerAccountInVed", idParameter);
        }
    
        public virtual int FirstWave_INSERTCRIMEA(Nullable<System.Guid> abiturientId, Nullable<int> sortNum)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var sortNumParameter = sortNum.HasValue ?
                new ObjectParameter("SortNum", sortNum) :
                new ObjectParameter("SortNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_INSERTCRIMEA", abiturientIdParameter, sortNumParameter);
        }
    
        public virtual int FirstWave_INSERTQUOTA(Nullable<System.Guid> abiturientId, Nullable<int> sortNum)
        {
            var abiturientIdParameter = abiturientId.HasValue ?
                new ObjectParameter("AbiturientId", abiturientId) :
                new ObjectParameter("AbiturientId", typeof(System.Guid));
    
            var sortNumParameter = sortNum.HasValue ?
                new ObjectParameter("SortNum", sortNum) :
                new ObjectParameter("SortNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FirstWave_INSERTQUOTA", abiturientIdParameter, sortNumParameter);
        }
    
        public virtual int OlympSubjectToExam_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympSubjectToExam_Delete", idParameter);
        }
    
        public virtual int OlympSubjectToExam_Insert(Nullable<int> olympSubjectId, Nullable<int> examId, ObjectParameter id)
        {
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("ExamId", examId) :
                new ObjectParameter("ExamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympSubjectToExam_Insert", olympSubjectIdParameter, examIdParameter, id);
        }
    
        public virtual int OlympSubjectToExam_Update(Nullable<int> olympSubjectId, Nullable<int> examId, Nullable<int> id)
        {
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("ExamId", examId) :
                new ObjectParameter("ExamId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympSubjectToExam_Update", olympSubjectIdParameter, examIdParameter, idParameter);
        }
    
        public virtual int PayDataEntry_Delete(Nullable<System.Guid> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayDataEntry_Delete", entryIdParameter);
        }
    
        public virtual int Person_EducationInfo_delete(Nullable<System.Guid> personId, Nullable<int> id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_EducationInfo_delete", personIdParameter, idParameter);
        }
    
        public virtual int Person_EducationInfo_insert(Nullable<System.Guid> personId, Nullable<bool> isExcellent, string schoolCity, Nullable<int> schoolTypeId, string schoolName, string schoolNum, Nullable<int> schoolExitYear, Nullable<double> schoolAVG, Nullable<int> countryEducId, Nullable<int> regionEducId, Nullable<bool> isEqual, string attestatSeries, string attestatNum, string diplomSeries, string diplomNum, string highEducation, string hEProfession, string hEQualification, Nullable<int> hEEntryYear, Nullable<int> hEExitYear, Nullable<int> hEStudyFormId, string hEWork, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var isExcellentParameter = isExcellent.HasValue ?
                new ObjectParameter("IsExcellent", isExcellent) :
                new ObjectParameter("IsExcellent", typeof(bool));
    
            var schoolCityParameter = schoolCity != null ?
                new ObjectParameter("SchoolCity", schoolCity) :
                new ObjectParameter("SchoolCity", typeof(string));
    
            var schoolTypeIdParameter = schoolTypeId.HasValue ?
                new ObjectParameter("SchoolTypeId", schoolTypeId) :
                new ObjectParameter("SchoolTypeId", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolNumParameter = schoolNum != null ?
                new ObjectParameter("SchoolNum", schoolNum) :
                new ObjectParameter("SchoolNum", typeof(string));
    
            var schoolExitYearParameter = schoolExitYear.HasValue ?
                new ObjectParameter("SchoolExitYear", schoolExitYear) :
                new ObjectParameter("SchoolExitYear", typeof(int));
    
            var schoolAVGParameter = schoolAVG.HasValue ?
                new ObjectParameter("SchoolAVG", schoolAVG) :
                new ObjectParameter("SchoolAVG", typeof(double));
    
            var countryEducIdParameter = countryEducId.HasValue ?
                new ObjectParameter("CountryEducId", countryEducId) :
                new ObjectParameter("CountryEducId", typeof(int));
    
            var regionEducIdParameter = regionEducId.HasValue ?
                new ObjectParameter("RegionEducId", regionEducId) :
                new ObjectParameter("RegionEducId", typeof(int));
    
            var isEqualParameter = isEqual.HasValue ?
                new ObjectParameter("IsEqual", isEqual) :
                new ObjectParameter("IsEqual", typeof(bool));
    
            var attestatSeriesParameter = attestatSeries != null ?
                new ObjectParameter("AttestatSeries", attestatSeries) :
                new ObjectParameter("AttestatSeries", typeof(string));
    
            var attestatNumParameter = attestatNum != null ?
                new ObjectParameter("AttestatNum", attestatNum) :
                new ObjectParameter("AttestatNum", typeof(string));
    
            var diplomSeriesParameter = diplomSeries != null ?
                new ObjectParameter("DiplomSeries", diplomSeries) :
                new ObjectParameter("DiplomSeries", typeof(string));
    
            var diplomNumParameter = diplomNum != null ?
                new ObjectParameter("DiplomNum", diplomNum) :
                new ObjectParameter("DiplomNum", typeof(string));
    
            var highEducationParameter = highEducation != null ?
                new ObjectParameter("HighEducation", highEducation) :
                new ObjectParameter("HighEducation", typeof(string));
    
            var hEProfessionParameter = hEProfession != null ?
                new ObjectParameter("HEProfession", hEProfession) :
                new ObjectParameter("HEProfession", typeof(string));
    
            var hEQualificationParameter = hEQualification != null ?
                new ObjectParameter("HEQualification", hEQualification) :
                new ObjectParameter("HEQualification", typeof(string));
    
            var hEEntryYearParameter = hEEntryYear.HasValue ?
                new ObjectParameter("HEEntryYear", hEEntryYear) :
                new ObjectParameter("HEEntryYear", typeof(int));
    
            var hEExitYearParameter = hEExitYear.HasValue ?
                new ObjectParameter("HEExitYear", hEExitYear) :
                new ObjectParameter("HEExitYear", typeof(int));
    
            var hEStudyFormIdParameter = hEStudyFormId.HasValue ?
                new ObjectParameter("HEStudyFormId", hEStudyFormId) :
                new ObjectParameter("HEStudyFormId", typeof(int));
    
            var hEWorkParameter = hEWork != null ?
                new ObjectParameter("HEWork", hEWork) :
                new ObjectParameter("HEWork", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_EducationInfo_insert", personIdParameter, isExcellentParameter, schoolCityParameter, schoolTypeIdParameter, schoolNameParameter, schoolNumParameter, schoolExitYearParameter, schoolAVGParameter, countryEducIdParameter, regionEducIdParameter, isEqualParameter, attestatSeriesParameter, attestatNumParameter, diplomSeriesParameter, diplomNumParameter, highEducationParameter, hEProfessionParameter, hEQualificationParameter, hEEntryYearParameter, hEExitYearParameter, hEStudyFormIdParameter, hEWorkParameter, id);
        }
    
        public virtual int Person_EducationInfo_update(Nullable<System.Guid> personId, Nullable<bool> isExcellent, string schoolCity, Nullable<int> schoolTypeId, string schoolName, string schoolNum, Nullable<int> schoolExitYear, Nullable<double> schoolAVG, Nullable<int> countryEducId, Nullable<int> regionEducId, Nullable<bool> isEqual, string attestatSeries, string attestatNum, string diplomSeries, string diplomNum, string highEducation, string hEProfession, string hEQualification, Nullable<int> hEEntryYear, Nullable<int> hEExitYear, Nullable<int> hEStudyFormId, string hEWork, Nullable<int> id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var isExcellentParameter = isExcellent.HasValue ?
                new ObjectParameter("IsExcellent", isExcellent) :
                new ObjectParameter("IsExcellent", typeof(bool));
    
            var schoolCityParameter = schoolCity != null ?
                new ObjectParameter("SchoolCity", schoolCity) :
                new ObjectParameter("SchoolCity", typeof(string));
    
            var schoolTypeIdParameter = schoolTypeId.HasValue ?
                new ObjectParameter("SchoolTypeId", schoolTypeId) :
                new ObjectParameter("SchoolTypeId", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolNumParameter = schoolNum != null ?
                new ObjectParameter("SchoolNum", schoolNum) :
                new ObjectParameter("SchoolNum", typeof(string));
    
            var schoolExitYearParameter = schoolExitYear.HasValue ?
                new ObjectParameter("SchoolExitYear", schoolExitYear) :
                new ObjectParameter("SchoolExitYear", typeof(int));
    
            var schoolAVGParameter = schoolAVG.HasValue ?
                new ObjectParameter("SchoolAVG", schoolAVG) :
                new ObjectParameter("SchoolAVG", typeof(double));
    
            var countryEducIdParameter = countryEducId.HasValue ?
                new ObjectParameter("CountryEducId", countryEducId) :
                new ObjectParameter("CountryEducId", typeof(int));
    
            var regionEducIdParameter = regionEducId.HasValue ?
                new ObjectParameter("RegionEducId", regionEducId) :
                new ObjectParameter("RegionEducId", typeof(int));
    
            var isEqualParameter = isEqual.HasValue ?
                new ObjectParameter("IsEqual", isEqual) :
                new ObjectParameter("IsEqual", typeof(bool));
    
            var attestatSeriesParameter = attestatSeries != null ?
                new ObjectParameter("AttestatSeries", attestatSeries) :
                new ObjectParameter("AttestatSeries", typeof(string));
    
            var attestatNumParameter = attestatNum != null ?
                new ObjectParameter("AttestatNum", attestatNum) :
                new ObjectParameter("AttestatNum", typeof(string));
    
            var diplomSeriesParameter = diplomSeries != null ?
                new ObjectParameter("DiplomSeries", diplomSeries) :
                new ObjectParameter("DiplomSeries", typeof(string));
    
            var diplomNumParameter = diplomNum != null ?
                new ObjectParameter("DiplomNum", diplomNum) :
                new ObjectParameter("DiplomNum", typeof(string));
    
            var highEducationParameter = highEducation != null ?
                new ObjectParameter("HighEducation", highEducation) :
                new ObjectParameter("HighEducation", typeof(string));
    
            var hEProfessionParameter = hEProfession != null ?
                new ObjectParameter("HEProfession", hEProfession) :
                new ObjectParameter("HEProfession", typeof(string));
    
            var hEQualificationParameter = hEQualification != null ?
                new ObjectParameter("HEQualification", hEQualification) :
                new ObjectParameter("HEQualification", typeof(string));
    
            var hEEntryYearParameter = hEEntryYear.HasValue ?
                new ObjectParameter("HEEntryYear", hEEntryYear) :
                new ObjectParameter("HEEntryYear", typeof(int));
    
            var hEExitYearParameter = hEExitYear.HasValue ?
                new ObjectParameter("HEExitYear", hEExitYear) :
                new ObjectParameter("HEExitYear", typeof(int));
    
            var hEStudyFormIdParameter = hEStudyFormId.HasValue ?
                new ObjectParameter("HEStudyFormId", hEStudyFormId) :
                new ObjectParameter("HEStudyFormId", typeof(int));
    
            var hEWorkParameter = hEWork != null ?
                new ObjectParameter("HEWork", hEWork) :
                new ObjectParameter("HEWork", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_EducationInfo_update", personIdParameter, isExcellentParameter, schoolCityParameter, schoolTypeIdParameter, schoolNameParameter, schoolNumParameter, schoolExitYearParameter, schoolAVGParameter, countryEducIdParameter, regionEducIdParameter, isEqualParameter, attestatSeriesParameter, attestatNumParameter, diplomSeriesParameter, diplomNumParameter, highEducationParameter, hEProfessionParameter, hEQualificationParameter, hEEntryYearParameter, hEExitYearParameter, hEStudyFormIdParameter, hEWorkParameter, idParameter);
        }
    
        public virtual int Abiturient_UpdateInnerEntryInEntryId(Nullable<System.Guid> innerEntryInEntryId, Nullable<System.Guid> id)
        {
            var innerEntryInEntryIdParameter = innerEntryInEntryId.HasValue ?
                new ObjectParameter("InnerEntryInEntryId", innerEntryInEntryId) :
                new ObjectParameter("InnerEntryInEntryId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateInnerEntryInEntryId", innerEntryInEntryIdParameter, idParameter);
        }
    
        public virtual int Abiturient_UpdateInnerEntryInEntryPriority(Nullable<System.Guid> innerEntryInEntryId, Nullable<int> priority, Nullable<System.Guid> applicationId)
        {
            var innerEntryInEntryIdParameter = innerEntryInEntryId.HasValue ?
                new ObjectParameter("InnerEntryInEntryId", innerEntryInEntryId) :
                new ObjectParameter("InnerEntryInEntryId", typeof(System.Guid));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateInnerEntryInEntryPriority", innerEntryInEntryIdParameter, priorityParameter, applicationIdParameter);
        }
    
        public virtual int Person_deleteAllInfo(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_deleteAllInfo", idParameter);
        }
    
        public virtual int PersonEgeRequest_insert(Nullable<System.Guid> personId, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonEgeRequest_insert", personIdParameter, id);
        }
    
        public virtual int PersonAchievement_delete(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonAchievement_delete", idParameter);
        }
    
        public virtual int PersonAchievement_insert(Nullable<System.Guid> personId, Nullable<int> achievementTypeId, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var achievementTypeIdParameter = achievementTypeId.HasValue ?
                new ObjectParameter("AchievementTypeId", achievementTypeId) :
                new ObjectParameter("AchievementTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonAchievement_insert", personIdParameter, achievementTypeIdParameter, id);
        }
    
        public virtual int PersonAchievement_update(Nullable<int> achievementTypeId, Nullable<System.Guid> id)
        {
            var achievementTypeIdParameter = achievementTypeId.HasValue ?
                new ObjectParameter("AchievementTypeId", achievementTypeId) :
                new ObjectParameter("AchievementTypeId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonAchievement_update", achievementTypeIdParameter, idParameter);
        }
    
        public virtual int Protocol_ClearHistory(Nullable<System.Guid> protocolId)
        {
            var protocolIdParameter = protocolId.HasValue ?
                new ObjectParameter("ProtocolId", protocolId) :
                new ObjectParameter("ProtocolId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Protocol_ClearHistory", protocolIdParameter);
        }
    
        public virtual int Person_EducationInfo_insertForeign(Nullable<System.Guid> personId, Nullable<bool> isExcellent, string schoolCity, Nullable<int> schoolTypeId, string schoolName, string schoolNum, Nullable<int> schoolExitYear, Nullable<double> schoolAVG, Nullable<int> foreignCountryEducId, Nullable<int> regionEducId, Nullable<bool> isEqual, string attestatSeries, string attestatNum, string diplomSeries, string diplomNum, string highEducation, string hEProfession, string hEQualification, Nullable<int> hEEntryYear, Nullable<int> hEExitYear, Nullable<int> hEStudyFormId, string hEWork, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var isExcellentParameter = isExcellent.HasValue ?
                new ObjectParameter("IsExcellent", isExcellent) :
                new ObjectParameter("IsExcellent", typeof(bool));
    
            var schoolCityParameter = schoolCity != null ?
                new ObjectParameter("SchoolCity", schoolCity) :
                new ObjectParameter("SchoolCity", typeof(string));
    
            var schoolTypeIdParameter = schoolTypeId.HasValue ?
                new ObjectParameter("SchoolTypeId", schoolTypeId) :
                new ObjectParameter("SchoolTypeId", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolNumParameter = schoolNum != null ?
                new ObjectParameter("SchoolNum", schoolNum) :
                new ObjectParameter("SchoolNum", typeof(string));
    
            var schoolExitYearParameter = schoolExitYear.HasValue ?
                new ObjectParameter("SchoolExitYear", schoolExitYear) :
                new ObjectParameter("SchoolExitYear", typeof(int));
    
            var schoolAVGParameter = schoolAVG.HasValue ?
                new ObjectParameter("SchoolAVG", schoolAVG) :
                new ObjectParameter("SchoolAVG", typeof(double));
    
            var foreignCountryEducIdParameter = foreignCountryEducId.HasValue ?
                new ObjectParameter("ForeignCountryEducId", foreignCountryEducId) :
                new ObjectParameter("ForeignCountryEducId", typeof(int));
    
            var regionEducIdParameter = regionEducId.HasValue ?
                new ObjectParameter("RegionEducId", regionEducId) :
                new ObjectParameter("RegionEducId", typeof(int));
    
            var isEqualParameter = isEqual.HasValue ?
                new ObjectParameter("IsEqual", isEqual) :
                new ObjectParameter("IsEqual", typeof(bool));
    
            var attestatSeriesParameter = attestatSeries != null ?
                new ObjectParameter("AttestatSeries", attestatSeries) :
                new ObjectParameter("AttestatSeries", typeof(string));
    
            var attestatNumParameter = attestatNum != null ?
                new ObjectParameter("AttestatNum", attestatNum) :
                new ObjectParameter("AttestatNum", typeof(string));
    
            var diplomSeriesParameter = diplomSeries != null ?
                new ObjectParameter("DiplomSeries", diplomSeries) :
                new ObjectParameter("DiplomSeries", typeof(string));
    
            var diplomNumParameter = diplomNum != null ?
                new ObjectParameter("DiplomNum", diplomNum) :
                new ObjectParameter("DiplomNum", typeof(string));
    
            var highEducationParameter = highEducation != null ?
                new ObjectParameter("HighEducation", highEducation) :
                new ObjectParameter("HighEducation", typeof(string));
    
            var hEProfessionParameter = hEProfession != null ?
                new ObjectParameter("HEProfession", hEProfession) :
                new ObjectParameter("HEProfession", typeof(string));
    
            var hEQualificationParameter = hEQualification != null ?
                new ObjectParameter("HEQualification", hEQualification) :
                new ObjectParameter("HEQualification", typeof(string));
    
            var hEEntryYearParameter = hEEntryYear.HasValue ?
                new ObjectParameter("HEEntryYear", hEEntryYear) :
                new ObjectParameter("HEEntryYear", typeof(int));
    
            var hEExitYearParameter = hEExitYear.HasValue ?
                new ObjectParameter("HEExitYear", hEExitYear) :
                new ObjectParameter("HEExitYear", typeof(int));
    
            var hEStudyFormIdParameter = hEStudyFormId.HasValue ?
                new ObjectParameter("HEStudyFormId", hEStudyFormId) :
                new ObjectParameter("HEStudyFormId", typeof(int));
    
            var hEWorkParameter = hEWork != null ?
                new ObjectParameter("HEWork", hEWork) :
                new ObjectParameter("HEWork", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_EducationInfo_insertForeign", personIdParameter, isExcellentParameter, schoolCityParameter, schoolTypeIdParameter, schoolNameParameter, schoolNumParameter, schoolExitYearParameter, schoolAVGParameter, foreignCountryEducIdParameter, regionEducIdParameter, isEqualParameter, attestatSeriesParameter, attestatNumParameter, diplomSeriesParameter, diplomNumParameter, highEducationParameter, hEProfessionParameter, hEQualificationParameter, hEEntryYearParameter, hEExitYearParameter, hEStudyFormIdParameter, hEWorkParameter, id);
        }
    
        public virtual int Person_EducationInfo_updateForeign(Nullable<System.Guid> personId, Nullable<bool> isExcellent, string schoolCity, Nullable<int> schoolTypeId, string schoolName, string schoolNum, Nullable<int> schoolExitYear, Nullable<double> schoolAVG, Nullable<int> foreignCountryEducId, Nullable<int> regionEducId, Nullable<bool> isEqual, string attestatSeries, string attestatNum, string diplomSeries, string diplomNum, string highEducation, string hEProfession, string hEQualification, Nullable<int> hEEntryYear, Nullable<int> hEExitYear, Nullable<int> hEStudyFormId, string hEWork, Nullable<int> id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var isExcellentParameter = isExcellent.HasValue ?
                new ObjectParameter("IsExcellent", isExcellent) :
                new ObjectParameter("IsExcellent", typeof(bool));
    
            var schoolCityParameter = schoolCity != null ?
                new ObjectParameter("SchoolCity", schoolCity) :
                new ObjectParameter("SchoolCity", typeof(string));
    
            var schoolTypeIdParameter = schoolTypeId.HasValue ?
                new ObjectParameter("SchoolTypeId", schoolTypeId) :
                new ObjectParameter("SchoolTypeId", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolNumParameter = schoolNum != null ?
                new ObjectParameter("SchoolNum", schoolNum) :
                new ObjectParameter("SchoolNum", typeof(string));
    
            var schoolExitYearParameter = schoolExitYear.HasValue ?
                new ObjectParameter("SchoolExitYear", schoolExitYear) :
                new ObjectParameter("SchoolExitYear", typeof(int));
    
            var schoolAVGParameter = schoolAVG.HasValue ?
                new ObjectParameter("SchoolAVG", schoolAVG) :
                new ObjectParameter("SchoolAVG", typeof(double));
    
            var foreignCountryEducIdParameter = foreignCountryEducId.HasValue ?
                new ObjectParameter("ForeignCountryEducId", foreignCountryEducId) :
                new ObjectParameter("ForeignCountryEducId", typeof(int));
    
            var regionEducIdParameter = regionEducId.HasValue ?
                new ObjectParameter("RegionEducId", regionEducId) :
                new ObjectParameter("RegionEducId", typeof(int));
    
            var isEqualParameter = isEqual.HasValue ?
                new ObjectParameter("IsEqual", isEqual) :
                new ObjectParameter("IsEqual", typeof(bool));
    
            var attestatSeriesParameter = attestatSeries != null ?
                new ObjectParameter("AttestatSeries", attestatSeries) :
                new ObjectParameter("AttestatSeries", typeof(string));
    
            var attestatNumParameter = attestatNum != null ?
                new ObjectParameter("AttestatNum", attestatNum) :
                new ObjectParameter("AttestatNum", typeof(string));
    
            var diplomSeriesParameter = diplomSeries != null ?
                new ObjectParameter("DiplomSeries", diplomSeries) :
                new ObjectParameter("DiplomSeries", typeof(string));
    
            var diplomNumParameter = diplomNum != null ?
                new ObjectParameter("DiplomNum", diplomNum) :
                new ObjectParameter("DiplomNum", typeof(string));
    
            var highEducationParameter = highEducation != null ?
                new ObjectParameter("HighEducation", highEducation) :
                new ObjectParameter("HighEducation", typeof(string));
    
            var hEProfessionParameter = hEProfession != null ?
                new ObjectParameter("HEProfession", hEProfession) :
                new ObjectParameter("HEProfession", typeof(string));
    
            var hEQualificationParameter = hEQualification != null ?
                new ObjectParameter("HEQualification", hEQualification) :
                new ObjectParameter("HEQualification", typeof(string));
    
            var hEEntryYearParameter = hEEntryYear.HasValue ?
                new ObjectParameter("HEEntryYear", hEEntryYear) :
                new ObjectParameter("HEEntryYear", typeof(int));
    
            var hEExitYearParameter = hEExitYear.HasValue ?
                new ObjectParameter("HEExitYear", hEExitYear) :
                new ObjectParameter("HEExitYear", typeof(int));
    
            var hEStudyFormIdParameter = hEStudyFormId.HasValue ?
                new ObjectParameter("HEStudyFormId", hEStudyFormId) :
                new ObjectParameter("HEStudyFormId", typeof(int));
    
            var hEWorkParameter = hEWork != null ?
                new ObjectParameter("HEWork", hEWork) :
                new ObjectParameter("HEWork", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_EducationInfo_updateForeign", personIdParameter, isExcellentParameter, schoolCityParameter, schoolTypeIdParameter, schoolNameParameter, schoolNumParameter, schoolExitYearParameter, schoolAVGParameter, foreignCountryEducIdParameter, regionEducIdParameter, isEqualParameter, attestatSeriesParameter, attestatNumParameter, diplomSeriesParameter, diplomNumParameter, highEducationParameter, hEProfessionParameter, hEQualificationParameter, hEEntryYearParameter, hEExitYearParameter, hEStudyFormIdParameter, hEWorkParameter, idParameter);
        }
    
        public virtual int PersonOtherPassport_delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonOtherPassport_delete", idParameter);
        }
    
        public virtual int PersonOtherPassport_insert(Nullable<System.Guid> personId, Nullable<int> passportTypeId, string passportSeries, string passportNumber, string surname, string name, string secondName, Nullable<System.DateTime> passportDate, ObjectParameter id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var passportTypeIdParameter = passportTypeId.HasValue ?
                new ObjectParameter("PassportTypeId", passportTypeId) :
                new ObjectParameter("PassportTypeId", typeof(int));
    
            var passportSeriesParameter = passportSeries != null ?
                new ObjectParameter("PassportSeries", passportSeries) :
                new ObjectParameter("PassportSeries", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var secondNameParameter = secondName != null ?
                new ObjectParameter("SecondName", secondName) :
                new ObjectParameter("SecondName", typeof(string));
    
            var passportDateParameter = passportDate.HasValue ?
                new ObjectParameter("PassportDate", passportDate) :
                new ObjectParameter("PassportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonOtherPassport_insert", personIdParameter, passportTypeIdParameter, passportSeriesParameter, passportNumberParameter, surnameParameter, nameParameter, secondNameParameter, passportDateParameter, id);
        }
    
        public virtual int PersonOtherPassport_update(Nullable<System.Guid> personId, Nullable<int> passportTypeId, string passportSeries, string passportNumber, string surname, string name, string secondName, Nullable<System.DateTime> passportDate, Nullable<int> id)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var passportTypeIdParameter = passportTypeId.HasValue ?
                new ObjectParameter("PassportTypeId", passportTypeId) :
                new ObjectParameter("PassportTypeId", typeof(int));
    
            var passportSeriesParameter = passportSeries != null ?
                new ObjectParameter("PassportSeries", passportSeries) :
                new ObjectParameter("PassportSeries", typeof(string));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var secondNameParameter = secondName != null ?
                new ObjectParameter("SecondName", secondName) :
                new ObjectParameter("SecondName", typeof(string));
    
            var passportDateParameter = passportDate.HasValue ?
                new ObjectParameter("PassportDate", passportDate) :
                new ObjectParameter("PassportDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonOtherPassport_update", personIdParameter, passportTypeIdParameter, passportSeriesParameter, passportNumberParameter, surnameParameter, nameParameter, secondNameParameter, passportDateParameter, idParameter);
        }
    
        public virtual int Person_UpdateForeignNationality(Nullable<int> foreignCountryId, Nullable<int> foreignNationalityId, Nullable<System.Guid> id)
        {
            var foreignCountryIdParameter = foreignCountryId.HasValue ?
                new ObjectParameter("ForeignCountryId", foreignCountryId) :
                new ObjectParameter("ForeignCountryId", typeof(int));
    
            var foreignNationalityIdParameter = foreignNationalityId.HasValue ?
                new ObjectParameter("ForeignNationalityId", foreignNationalityId) :
                new ObjectParameter("ForeignNationalityId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_UpdateForeignNationality", foreignCountryIdParameter, foreignNationalityIdParameter, idParameter);
        }
    
        [DbFunction("PriemEntities", "GetFacultyIdsByNameFunc")]
        public virtual IQueryable<Nullable<int>> GetFacultyIdsByNameFunc(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[PriemEntities].[GetFacultyIdsByNameFunc](@name)", nameParameter);
        }
    
        public virtual int OlympResultToCommonBenefit_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympResultToCommonBenefit_Delete", idParameter);
        }
    
        public virtual int OlympResultToCommonBenefit_Insert(Nullable<System.Guid> entryId, Nullable<int> olympTypeId, Nullable<int> olympLevelId, Nullable<int> olympSubjectId, Nullable<int> olympValueId, ObjectParameter id)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympValueIdParameter = olympValueId.HasValue ?
                new ObjectParameter("OlympValueId", olympValueId) :
                new ObjectParameter("OlympValueId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympResultToCommonBenefit_Insert", entryIdParameter, olympTypeIdParameter, olympLevelIdParameter, olympSubjectIdParameter, olympValueIdParameter, id);
        }
    
        public virtual int OlympResultToCommonBenefit_Update(Nullable<System.Guid> entryId, Nullable<int> olympTypeId, Nullable<int> olympLevelId, Nullable<int> olympSubjectId, Nullable<int> olympValueId, Nullable<int> id)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympValueIdParameter = olympValueId.HasValue ?
                new ObjectParameter("OlympValueId", olympValueId) :
                new ObjectParameter("OlympValueId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympResultToCommonBenefit_Update", entryIdParameter, olympTypeIdParameter, olympLevelIdParameter, olympSubjectIdParameter, olympValueIdParameter, idParameter);
        }
    
        public virtual int PersonNoticies_insert(Nullable<System.Guid> personId, string noticeText)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(System.Guid));
    
            var noticeTextParameter = noticeText != null ?
                new ObjectParameter("NoticeText", noticeText) :
                new ObjectParameter("NoticeText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PersonNoticies_insert", personIdParameter, noticeTextParameter);
        }
    
        public virtual int Abiturient_UpdateBarcodeAndCommitId(Nullable<int> barcode, Nullable<System.Guid> commitId, Nullable<System.Guid> id)
        {
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(int));
    
            var commitIdParameter = commitId.HasValue ?
                new ObjectParameter("CommitId", commitId) :
                new ObjectParameter("CommitId", typeof(System.Guid));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Abiturient_UpdateBarcodeAndCommitId", barcodeParameter, commitIdParameter, idParameter);
        }
    
        public virtual int OlympResultToAdditionalMark_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympResultToAdditionalMark_Delete", idParameter);
        }
    
        public virtual int OlympResultToAdditionalMark_Insert(Nullable<System.Guid> entryId, Nullable<int> olympTypeId, Nullable<int> olympLevelId, Nullable<int> olympNameId, Nullable<int> olympSubjectId, Nullable<int> olympValueId, Nullable<int> olympYear, Nullable<int> additionalMark, ObjectParameter id)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympNameIdParameter = olympNameId.HasValue ?
                new ObjectParameter("OlympNameId", olympNameId) :
                new ObjectParameter("OlympNameId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympValueIdParameter = olympValueId.HasValue ?
                new ObjectParameter("OlympValueId", olympValueId) :
                new ObjectParameter("OlympValueId", typeof(int));
    
            var olympYearParameter = olympYear.HasValue ?
                new ObjectParameter("OlympYear", olympYear) :
                new ObjectParameter("OlympYear", typeof(int));
    
            var additionalMarkParameter = additionalMark.HasValue ?
                new ObjectParameter("AdditionalMark", additionalMark) :
                new ObjectParameter("AdditionalMark", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympResultToAdditionalMark_Insert", entryIdParameter, olympTypeIdParameter, olympLevelIdParameter, olympNameIdParameter, olympSubjectIdParameter, olympValueIdParameter, olympYearParameter, additionalMarkParameter, id);
        }
    
        public virtual int OlympResultToAdditionalMark_Update(Nullable<System.Guid> entryId, Nullable<int> olympTypeId, Nullable<int> olympLevelId, Nullable<int> olympNameId, Nullable<int> olympSubjectId, Nullable<int> olympValueId, Nullable<int> olympYear, Nullable<int> additionalMark, Nullable<int> id)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(System.Guid));
    
            var olympTypeIdParameter = olympTypeId.HasValue ?
                new ObjectParameter("OlympTypeId", olympTypeId) :
                new ObjectParameter("OlympTypeId", typeof(int));
    
            var olympLevelIdParameter = olympLevelId.HasValue ?
                new ObjectParameter("OlympLevelId", olympLevelId) :
                new ObjectParameter("OlympLevelId", typeof(int));
    
            var olympNameIdParameter = olympNameId.HasValue ?
                new ObjectParameter("OlympNameId", olympNameId) :
                new ObjectParameter("OlympNameId", typeof(int));
    
            var olympSubjectIdParameter = olympSubjectId.HasValue ?
                new ObjectParameter("OlympSubjectId", olympSubjectId) :
                new ObjectParameter("OlympSubjectId", typeof(int));
    
            var olympValueIdParameter = olympValueId.HasValue ?
                new ObjectParameter("OlympValueId", olympValueId) :
                new ObjectParameter("OlympValueId", typeof(int));
    
            var olympYearParameter = olympYear.HasValue ?
                new ObjectParameter("OlympYear", olympYear) :
                new ObjectParameter("OlympYear", typeof(int));
    
            var additionalMarkParameter = additionalMark.HasValue ?
                new ObjectParameter("AdditionalMark", additionalMark) :
                new ObjectParameter("AdditionalMark", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OlympResultToAdditionalMark_Update", entryIdParameter, olympTypeIdParameter, olympLevelIdParameter, olympNameIdParameter, olympSubjectIdParameter, olympValueIdParameter, olympYearParameter, additionalMarkParameter, idParameter);
        }
    
        public virtual int Person_EducationInfo_SchoolClass_update(Nullable<int> schoolExitClassId, Nullable<int> id)
        {
            var schoolExitClassIdParameter = schoolExitClassId.HasValue ?
                new ObjectParameter("SchoolExitClassId", schoolExitClassId) :
                new ObjectParameter("SchoolExitClassId", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Person_EducationInfo_SchoolClass_update", schoolExitClassIdParameter, idParameter);
        }
    }
}
